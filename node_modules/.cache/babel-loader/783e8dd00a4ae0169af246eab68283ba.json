{"ast":null,"code":"var _jsxFileName = \"/Users/cavenlim/CavenLim site backup/src/Components/VoxelDog.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Box, Spinner, Th } from \"@chakra-ui/react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { loadGLTFModel } from \"./Model\";\nimport { render } from \"@testing-library/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction easeOutCirc(x) {\n  return Math.sqrt(1 - Math.pow(x - 1, 4));\n}\n\nconst VoxelDog = () => {\n  _s();\n\n  const refContainer = useRef();\n  const [loading, setLoading] = useState(true);\n  const [renderer, setRenderer] = useState();\n  const [camera, setCamera] = useState();\n  const [target] = useState(new THREE.Vector3(-0.5, 1.2, 0));\n  const [initialCameraPosition] = useState(new THREE.Vector3(20 * Math.sin(0.2 * Math.PI), 10, 20 * Math.cos(0.2 * Math.PI)));\n  const [scene] = useState(new THREE.Scene());\n  const [_controls, setControls] = useState();\n  useEffect(() => {\n    const {\n      current: container\n    } = refContainer;\n\n    if (container && !renderer) {\n      const scW = container.clientWidth;\n      const scH = container.clientHeight;\n      const renderer = new THREE.WebGL1Renderer({\n        antialias: true,\n        alpha: true\n      });\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(scW, scH);\n      renderer.outputEncoding = THREE.sRGBEncoding;\n      container.appendChild(renderer.domElement);\n      setRenderer(renderer);\n      const scale = scH * 0.005 + 4.8;\n      const camera = new THREE.OrthographicCamera(-scale, scale, scale, -scale, 0.01, 50000);\n      camera.position.copy(initialCameraPosition);\n      camera.lookAt(target);\n      setCamera(camera);\n      const ambientLight = new THREE.AmbientLight(0xcccccc, 1);\n      scene.add(ambientLight);\n      const controls = new OrbitControls(camera, renderer.domElement);\n      controls.autoRotate = true;\n      controls.target = target;\n      setControls(controls);\n      loadGLTFModel(scene, '../assets/Images/VoxelDog.glb', {\n        receiveShadow: false,\n        castShadow: false\n      }).then(() => {});\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    ref: refContainer,\n    className: \"voxel-dog\",\n    m: \"auto\",\n    at: ['-20px', '-60px', '-120px'],\n    mb: ['-40px', '-140px', '-200px'],\n    w: [280, 480, 640],\n    h: [280, 480, 640],\n    position: \"relative\",\n    children: [loading && /*#__PURE__*/_jsxDEV(Spinner, {\n      size: \"xl\",\n      position: \"absolute\",\n      left: \"50%\",\n      top: \"50%\",\n      ml: \"calc(0px - var(-spinner-size) / 2) \",\n      mt: \"calc(0px - var(--spinner-size))\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this), \"Dog!!\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\n_s(VoxelDog, \"DRNLGWEV+aZrQnYqoMasvAoXg0g=\");\n\n_c = VoxelDog;\nexport default VoxelDog;\n\nvar _c;\n\n$RefreshReg$(_c, \"VoxelDog\");","map":{"version":3,"sources":["/Users/cavenlim/CavenLim site backup/src/Components/VoxelDog.js"],"names":["useState","useEffect","useRef","useCallback","Box","Spinner","Th","THREE","OrbitControls","loadGLTFModel","render","easeOutCirc","x","Math","sqrt","pow","VoxelDog","refContainer","loading","setLoading","renderer","setRenderer","camera","setCamera","target","Vector3","initialCameraPosition","sin","PI","cos","scene","Scene","_controls","setControls","current","container","scW","clientWidth","scH","clientHeight","WebGL1Renderer","antialias","alpha","setPixelRatio","window","devicePixelRatio","setSize","outputEncoding","sRGBEncoding","appendChild","domElement","scale","OrthographicCamera","position","copy","lookAt","ambientLight","AmbientLight","add","controls","autoRotate","receiveShadow","castShadow","then"],"mappings":"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","sourcesContent":["import { useState,useEffect,useRef,useCallback } from \"react\";\nimport { Box,Spinner, Th } from \"@chakra-ui/react\";\nimport * as THREE from \"three\";\nimport {OrbitControls} from'three/examples/jsm/controls/OrbitControls';\nimport { loadGLTFModel } from \"./Model\";\nimport { render } from \"@testing-library/react\";\n\nfunction easeOutCirc(x){\n    return Math.sqrt(1-Math.pow(x-1,4))\n}\n\nconst VoxelDog = () => {\n    const refContainer = useRef()\n    const [loading,setLoading]=useState(true)\n    const [renderer,setRenderer] = useState()\n    const [camera,setCamera] = useState()\n    const [target] = useState(new THREE.Vector3(-0.5,1.2,0))\n    const [initialCameraPosition] = useState(\n        new THREE.Vector3(20 * Math.sin(0.2*Math.PI),\n        10,\n        20*Math.cos(0.2*Math.PI)\n        )\n    )\n    const [scene] = useState(new THREE.Scene())\n    const [_controls,setControls] = useState()\n\n    useEffect(() =>{\n        const { current:container} = refContainer\n        if(container && !renderer){\n            const scW = container.clientWidth\n            const scH = container.clientHeight\n\n            const renderer = new THREE.WebGL1Renderer({\n                antialias:true,\n                alpha:true\n\n            })\n            renderer.setPixelRatio(window.devicePixelRatio)\n            renderer.setSize(scW,scH)\n            renderer.outputEncoding = THREE.sRGBEncoding\n            container.appendChild(renderer.domElement)\n            setRenderer(renderer)\n\n            const scale = scH*0.005 +4.8\n            const camera = new THREE.OrthographicCamera(\n                -scale,scale,scale,-scale,0.01,50000\n            )\n            camera.position.copy(initialCameraPosition)\n            camera.lookAt(target)\n            setCamera(camera)\n\n            const ambientLight = new THREE.AmbientLight(0xcccccc,1)\n            scene.add(ambientLight)\n\n            const controls = new OrbitControls(camera,renderer.domElement)\n            controls.autoRotate = true\n            controls.target = target\n            setControls(controls)\n\n            loadGLTFModel(scene,'../assets/Images/VoxelDog.glb',{\n                receiveShadow: false,\n                castShadow:false\n\n            }).then(()=>{\n                \n            })\n        }\n\n    },[])\n\n    return(\n        <Box ref={refContainer} className='voxel-dog' m=\"auto\" \n        at={['-20px','-60px','-120px']}\n        mb={['-40px','-140px','-200px']}\n        w={[280,480,640]}\n        h={[280,480,640]}\n        position=\"relative\"\n        >\n            {loading &&(\n                <Spinner size=\"xl\" position=\"absolute\" left =\"50%\" top =\"50%\" ml=\"calc(0px - var(-spinner-size) / 2) \" \n                mt=\"calc(0px - var(--spinner-size))\" />\n            )}\n            Dog!!\n        </Box>\n    )\n}\nexport default VoxelDog;"]},"metadata":{},"sourceType":"module"}