{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { Alert, AlertDescription, AlertIcon, AlertTitle } from \"@chakra-ui/alert\";\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { chakra, ColorModeContext, ThemeProvider, useChakra } from \"@chakra-ui/system\";\nimport defaultTheme from \"@chakra-ui/theme\";\nimport { isFunction, noop } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { toast } from \"./toast.class\";\nimport { getToastPlacement } from \"./toast.placement\";\nvar Toast = props => {\n  var {\n    status,\n    variant,\n    id,\n    title,\n    isClosable,\n    onClose,\n    description\n  } = props;\n  var alertTitleId = typeof id !== \"undefined\" ? \"toast-\" + id + \"-title\" : undefined;\n  return /*#__PURE__*/React.createElement(Alert, {\n    status: status,\n    variant: variant,\n    id: id,\n    alignItems: \"start\",\n    borderRadius: \"md\",\n    boxShadow: \"lg\",\n    paddingEnd: 8,\n    textAlign: \"start\",\n    width: \"auto\",\n    \"aria-labelledby\": alertTitleId\n  }, /*#__PURE__*/React.createElement(AlertIcon, null), /*#__PURE__*/React.createElement(chakra.div, {\n    flex: \"1\",\n    maxWidth: \"100%\"\n  }, title && /*#__PURE__*/React.createElement(AlertTitle, {\n    id: alertTitleId\n  }, title), description && /*#__PURE__*/React.createElement(AlertDescription, {\n    display: \"block\"\n  }, description)), isClosable && /*#__PURE__*/React.createElement(CloseButton, {\n    size: \"sm\",\n    onClick: onClose,\n    position: \"absolute\",\n    insetEnd: 1,\n    top: 1\n  }));\n};\nvar defaults = {\n  duration: 5000,\n  position: \"bottom\",\n  variant: \"solid\"\n};\nexport var defaultStandaloneParam = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: noop,\n  setColorMode: noop,\n  defaultOptions: defaults\n};\n/**\n * Create a toast from outside of React Components\n */\n\nexport function createStandaloneToast(_temp) {\n  var {\n    theme = defaultStandaloneParam.theme,\n    colorMode = defaultStandaloneParam.colorMode,\n    toggleColorMode = defaultStandaloneParam.toggleColorMode,\n    setColorMode = defaultStandaloneParam.setColorMode,\n    defaultOptions = defaultStandaloneParam.defaultOptions\n  } = _temp === void 0 ? defaultStandaloneParam : _temp;\n  var renderWithProviders = (props, options) => /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme\n  }, /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n    value: {\n      colorMode,\n      setColorMode,\n      toggleColorMode\n    }\n  }, isFunction(options.render) ? options.render(props) : /*#__PURE__*/React.createElement(Toast, _extends({}, props, options))));\n  var toastImpl = options => {\n    var opts = _extends({}, defaultOptions, options);\n    opts.position = getToastPlacement(opts.position, theme.direction);\n    var Message = props => renderWithProviders(props, opts);\n    return toast.notify(Message, opts);\n  };\n  toastImpl.close = toast.close;\n  toastImpl.closeAll = toast.closeAll; // toasts can only be updated if they have a valid id\n\n  toastImpl.update = (id, options) => {\n    if (!id) return;\n    var opts = _extends({}, defaultOptions, options);\n    opts.position = getToastPlacement(opts.position, theme.direction);\n    toast.update(id, _extends({}, opts, {\n      message: props => renderWithProviders(props, opts)\n    }));\n  };\n  toastImpl.isActive = toast.isActive;\n  return toastImpl;\n}\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\n\nexport function useToast(options) {\n  var {\n    theme,\n    setColorMode,\n    toggleColorMode,\n    colorMode\n  } = useChakra();\n  return React.useMemo(() => {\n    return createStandaloneToast({\n      theme,\n      colorMode,\n      setColorMode,\n      toggleColorMode,\n      defaultOptions: options\n    });\n  }, [theme, setColorMode, toggleColorMode, colorMode, options]);\n}\nexport default useToast;","map":{"version":3,"names":["Alert","AlertDescription","AlertIcon","AlertTitle","CloseButton","chakra","ColorModeContext","ThemeProvider","useChakra","defaultTheme","isFunction","noop","React","toast","getToastPlacement","Toast","props","status","variant","id","title","isClosable","onClose","description","alertTitleId","undefined","createElement","alignItems","borderRadius","boxShadow","paddingEnd","textAlign","width","div","flex","maxWidth","display","size","onClick","position","insetEnd","top","defaults","duration","defaultStandaloneParam","theme","colorMode","toggleColorMode","setColorMode","defaultOptions","createStandaloneToast","_temp","renderWithProviders","options","Provider","value","render","_extends","toastImpl","opts","direction","Message","notify","close","closeAll","update","message","isActive","useToast","useMemo"],"sources":["/Users/cavenlim/CavenLim site backup/node_modules/@chakra-ui/toast/src/use-toast.tsx"],"sourcesContent":["import type { AlertStatus } from \"@chakra-ui/alert\"\nimport {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n} from \"@chakra-ui/alert\"\nimport { CloseButton } from \"@chakra-ui/close-button\"\nimport {\n  chakra,\n  ColorMode,\n  ColorModeContext,\n  ThemeProvider,\n  useChakra,\n} from \"@chakra-ui/system\"\nimport defaultTheme from \"@chakra-ui/theme\"\nimport { isFunction, noop } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { toast } from \"./toast.class\"\nimport {\n  getToastPlacement,\n  ToastPositionWithLogical,\n  WithoutLogicalPosition,\n} from \"./toast.placement\"\nimport type { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\n\nexport interface UseToastOptions {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastPositionWithLogical\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   */\n  isClosable?: boolean\n  /**\n   * The alert component `variant` to use\n   */\n  variant?: \"subtle\" | \"solid\" | \"left-accent\" | \"top-accent\" | (string & {})\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n}\n\ntype UseToastOptionsNormalized = WithoutLogicalPosition<UseToastOptions>\n\nexport type IToast = UseToastOptions\n\nconst Toast: React.FC<any> = (props) => {\n  const { status, variant, id, title, isClosable, onClose, description } = props\n\n  const alertTitleId = typeof id !== \"undefined\" ? `toast-${id}-title` : undefined\n\n  return (\n    <Alert\n      status={status}\n      variant={variant}\n      id={id}\n      alignItems=\"start\"\n      borderRadius=\"md\"\n      boxShadow=\"lg\"\n      paddingEnd={8}\n      textAlign=\"start\"\n      width=\"auto\"\n      aria-labelledby={alertTitleId}\n    >\n      <AlertIcon />\n      <chakra.div flex=\"1\" maxWidth=\"100%\">\n        {title && <AlertTitle id={alertTitleId}>{title}</AlertTitle>}\n        {description && (\n          <AlertDescription display=\"block\">{description}</AlertDescription>\n        )}\n      </chakra.div>\n      {isClosable && (\n        <CloseButton\n          size=\"sm\"\n          onClick={onClose}\n          position=\"absolute\"\n          insetEnd={1}\n          top={1}\n        />\n      )}\n    </Alert>\n  )\n}\n\nconst defaults = {\n  duration: 5000,\n  position: \"bottom\",\n  variant: \"solid\",\n} as const\n\nexport type CreateStandAloneToastParam = Partial<\n  ReturnType<typeof useChakra> & {\n    setColorMode: (value: ColorMode) => void\n    defaultOptions: UseToastOptions\n  }\n>\n\nexport const defaultStandaloneParam: Required<CreateStandAloneToastParam> = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: noop,\n  setColorMode: noop,\n  defaultOptions: defaults,\n}\n/**\n * Create a toast from outside of React Components\n */\nexport function createStandaloneToast({\n  theme = defaultStandaloneParam.theme,\n  colorMode = defaultStandaloneParam.colorMode,\n  toggleColorMode = defaultStandaloneParam.toggleColorMode,\n  setColorMode = defaultStandaloneParam.setColorMode,\n  defaultOptions = defaultStandaloneParam.defaultOptions,\n}: CreateStandAloneToastParam = defaultStandaloneParam) {\n  const renderWithProviders = (\n    props: React.PropsWithChildren<RenderProps>,\n    options: UseToastOptionsNormalized,\n  ) => (\n    <ThemeProvider theme={theme}>\n      <ColorModeContext.Provider\n        value={{ colorMode, setColorMode, toggleColorMode }}\n      >\n        {isFunction(options.render) ? (\n          options.render(props)\n        ) : (\n          <Toast {...props} {...options} />\n        )}\n      </ColorModeContext.Provider>\n    </ThemeProvider>\n  )\n\n  const toastImpl = (options?: UseToastOptions) => {\n    const opts = { ...defaultOptions, ...options } as UseToastOptionsNormalized\n    opts.position = getToastPlacement(opts.position, theme.direction)\n\n    const Message: React.FC<RenderProps> = (props) =>\n      renderWithProviders(props, opts)\n\n    return toast.notify(Message, opts)\n  }\n\n  toastImpl.close = toast.close\n  toastImpl.closeAll = toast.closeAll\n\n  // toasts can only be updated if they have a valid id\n  toastImpl.update = (id: ToastId, options: Omit<UseToastOptions, \"id\">) => {\n    if (!id) return\n\n    const opts = { ...defaultOptions, ...options } as UseToastOptionsNormalized\n    opts.position = getToastPlacement(opts.position, theme.direction)\n\n    toast.update(id, {\n      ...opts,\n      message: (props) => renderWithProviders(props, opts),\n    })\n  }\n\n  toastImpl.isActive = toast.isActive\n\n  return toastImpl\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions) {\n  const { theme, setColorMode, toggleColorMode, colorMode } = useChakra()\n  return React.useMemo(() => {\n    return createStandaloneToast({\n      theme,\n      colorMode,\n      setColorMode,\n      toggleColorMode,\n      defaultOptions: options,\n    })\n  }, [theme, setColorMode, toggleColorMode, colorMode, options])\n}\n\nexport default useToast\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}