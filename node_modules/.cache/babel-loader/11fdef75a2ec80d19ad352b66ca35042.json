{"ast":null,"code":"var _jsxFileName = \"/Users/cavenlim/CavenLim site backup/src/Components/VoxelDog.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef, useCallback, forwardRef } from \"react\";\nimport { Box, Spinner, useFormControlProps } from \"@chakra-ui/react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { loadGLTFModel } from \"./Model\";\nimport { DogSpinner, DogContainer } from './VoxelDogLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction easeOutCirc(x) {\n  return Math.sqrt(1 - Math.pow(x - 1, 4));\n}\n\nconst VoxelDog = () => {\n  _s();\n\n  const refContainer = useRef();\n  const [loading, setLoading] = useState(true);\n  const [renderer, setRenderer] = useState();\n  const [_camera, setCamera] = useState();\n  const [target] = useState(new THREE.Vector3(-0.4, 2, 0)); //-0.5,1.2,0\n\n  const [initialCameraPosition] = useState(new THREE.Vector3(0, 100, 1000));\n  const [scene] = useState(new THREE.Scene());\n  const [_controls, setControls] = useState();\n  useEffect(() => {\n    const {\n      current: container\n    } = refContainer;\n\n    if (container && !renderer) {\n      const scW = container.clientWidth;\n      const scH = container.clientHeight;\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(window.innerWidth * 0.85, 640);\n      renderer.outputEncoding = THREE.sRGBEncoding;\n      container.appendChild(renderer.domElement);\n      setRenderer(renderer);\n      const scale = scH * 0.005 + 4.8;\n      const camera = new THREE.OrthographicCamera(-scale, scale, scale, -scale, 0.01, 10000);\n      camera.position.copy(initialCameraPosition);\n      camera.lookAt(target);\n      setCamera(camera);\n      const ambientLight = new THREE.AmbientLight(0xcccccc, 1);\n      scene.add(ambientLight);\n      const controls = new OrbitControls(camera, renderer.domElement);\n      controls.autoRotate = true;\n      controls.target = target;\n      setControls(controls);\n      window.addEventListener('resize', function () {\n        renderer.setSize(window.innerWidth * 0.72, 560);\n        camera.aspect = window.innerWidth / window.innerHeight;\n      });\n      loadGLTFModel(scene, '/DoggyDone.glb', {\n        receiveShadow: false,\n        castShadow: false\n      }).then(() => {\n        animate();\n        setLoading(false);\n        controls.enableZoom = false;\n      });\n      let req = null;\n      let frame = 0;\n\n      const animate = () => {\n        req = requestAnimationFrame(animate);\n        frame = frame <= 100 ? frame + 1 : frame;\n\n        if (frame <= 100) {\n          const p = initialCameraPosition;\n          const rotSpeed = -easeOutCirc(frame / 120) * Math.PI * 20;\n          camera.position.y = 10;\n          camera.position.x = p.x * Math.cos(rotSpeed) + p.z * Math.sin(rotSpeed);\n          camera.position.z = p.z * Math.cos(rotSpeed) - p.x * Math.sin(rotSpeed);\n          camera.lookAt(target);\n        } else {\n          controls.update();\n        }\n\n        renderer.render(scene, camera);\n      };\n\n      return () => {\n        cancelAnimationFrame(req);\n        renderer.dispose();\n      };\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(DogContainer, {\n    ref: refContainer,\n    children: [loading && /*#__PURE__*/_jsxDEV(DogSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 54\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n\n_s(VoxelDog, \"q9M4oFIKHCcTzikdZwE768RV1c0=\");\n\n_c = VoxelDog;\nexport default VoxelDog;\n\nvar _c;\n\n$RefreshReg$(_c, \"VoxelDog\");","map":{"version":3,"sources":["/Users/cavenlim/CavenLim site backup/src/Components/VoxelDog.js"],"names":["useState","useEffect","useRef","useCallback","forwardRef","Box","Spinner","useFormControlProps","THREE","OrbitControls","loadGLTFModel","DogSpinner","DogContainer","easeOutCirc","x","Math","sqrt","pow","VoxelDog","refContainer","loading","setLoading","renderer","setRenderer","_camera","setCamera","target","Vector3","initialCameraPosition","scene","Scene","_controls","setControls","current","container","scW","clientWidth","scH","clientHeight","WebGLRenderer","antialias","alpha","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","outputEncoding","sRGBEncoding","appendChild","domElement","scale","camera","OrthographicCamera","position","copy","lookAt","ambientLight","AmbientLight","add","controls","autoRotate","addEventListener","aspect","innerHeight","receiveShadow","castShadow","then","animate","enableZoom","req","frame","requestAnimationFrame","p","rotSpeed","PI","y","cos","z","sin","update","render","cancelAnimationFrame","dispose"],"mappings":"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","sourcesContent":["import { useState,useEffect,useRef,useCallback,forwardRef } from \"react\";\nimport { Box,Spinner, useFormControlProps} from \"@chakra-ui/react\";\nimport * as THREE from \"three\";\nimport {OrbitControls} from'three/examples/jsm/controls/OrbitControls';\nimport { loadGLTFModel } from \"./Model\";\nimport { DogSpinner, DogContainer } from './VoxelDogLoader'\n\nfunction easeOutCirc(x){\n    return Math.sqrt(1-Math.pow(x-1,4))\n}\n\nconst VoxelDog = () => {\n    const refContainer = useRef()\n    const [loading,setLoading]=useState(true)\n    const [renderer,setRenderer] = useState()\n    const [_camera,setCamera] = useState()\n    const [target] = useState(new THREE.Vector3(-0.4,2,0))//-0.5,1.2,0\n    const [initialCameraPosition] = useState(\n        new THREE.Vector3(0,100,1000\n        )\n    )\n    const [scene] = useState(new THREE.Scene())\n    const [_controls,setControls] = useState()\n\n    useEffect(() =>{\n        const { current:container} = refContainer\n        if(container && !renderer){\n            const scW = container.clientWidth\n            const scH = container.clientHeight\n\n            const renderer = new THREE.WebGLRenderer({\n                antialias:true,\n                alpha:true\n\n            })\n            renderer.setPixelRatio(window.devicePixelRatio)\n            renderer.setSize(window.innerWidth*0.85,640);\n            renderer.outputEncoding = THREE.sRGBEncoding\n            container.appendChild(renderer.domElement)\n            setRenderer(renderer)\n\n            const scale = scH * 0.005 + 4.8\n            const camera = new THREE.OrthographicCamera(\n                -scale,scale,scale,-scale,0.01,10000\n            )\n            camera.position.copy(initialCameraPosition)\n            camera.lookAt(target)\n            setCamera(camera)\n\n            const ambientLight = new THREE.AmbientLight(0xcccccc,1)\n            scene.add(ambientLight)\n\n            const controls = new OrbitControls(camera,renderer.domElement)\n            controls.autoRotate = true\n            controls.target = target\n        \n            setControls(controls)\n            window.addEventListener('resize',function(){\n                renderer.setSize(window.innerWidth*0.72,560);\n                camera.aspect=window.innerWidth/window.innerHeight;\n                \n            \n            })\n\n            loadGLTFModel(scene,'/DoggyDone.glb',{\n                receiveShadow: false,\n                castShadow:false\n\n            }).then(()=>{\n                animate()\n                setLoading(false)\n                controls.enableZoom=false\n                \n            })\n            \n            let req = null\n            let frame = 0\n\n            const animate = () => {\n                req = requestAnimationFrame(animate)\n\n                frame = frame <= 100 ? frame + 1 : frame\n\n                if(frame <= 100){\n                    const p = initialCameraPosition\n                    const rotSpeed = -easeOutCirc(frame/120) * Math.PI * 20\n                    camera.position.y=10\n                    camera.position.x= p.x * Math.cos(rotSpeed) + p.z * Math.sin(rotSpeed)\n                    camera.position.z= p.z * Math.cos(rotSpeed) - p.x * Math.sin(rotSpeed)\n                    camera.lookAt(target)\n                }else{\n                    controls.update()\n                }\n                renderer.render(scene,camera)\n            }\n            return () =>{\n                cancelAnimationFrame(req)\n                renderer.dispose()\n            }\n        }\n\n    },[])\n\n    return(\n        <DogContainer ref={refContainer}>{loading && <DogSpinner />} </DogContainer>\n    )\n}\nexport default VoxelDog;"]},"metadata":{},"sourceType":"module"}