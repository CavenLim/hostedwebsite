{"ast":null,"code":"// This implementation is heavily inspired by react-aria's implementation\nimport * as React from \"react\";\nvar defaultIdContext = {\n  prefix: Math.round(Math.random() * 10000000000),\n  current: 0\n};\nvar IdContext = /*#__PURE__*/React.createContext(defaultIdContext);\nexport var IdProvider = /*#__PURE__*/React.memo(_ref => {\n  var {\n    children\n  } = _ref;\n  var currentContext = React.useContext(IdContext);\n  var isRoot = currentContext === defaultIdContext;\n  var context = React.useMemo(() => ({\n    prefix: isRoot ? 0 : ++currentContext.prefix,\n    current: 0\n  }), [isRoot, currentContext]);\n  return /*#__PURE__*/React.createElement(IdContext.Provider, {\n    value: context\n  }, children);\n});\nexport function useId(idProp, prefix) {\n  var context = React.useContext(IdContext);\n  return React.useMemo(() => idProp || [prefix, context.prefix, ++context.current].filter(Boolean).join(\"-\"),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [idProp, prefix]);\n}\n/**\n * Reack hook to generate ids for use in compound components\n *\n * @param idProp the external id passed from the user\n * @param prefixes array of prefixes to use\n *\n * @example\n *\n * ```js\n * const [buttonId, menuId] = useIds(\"52\", \"button\", \"menu\")\n *\n * // buttonId will be `button-52`\n * // menuId will be `menu-52`\n * ```\n */\n\nexport function useIds(idProp) {\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n  var id = useId(idProp);\n  return React.useMemo(() => {\n    return prefixes.map(prefix => prefix + \"-\" + id);\n  }, [id, prefixes]);\n}\n/**\n * Used to generate an id, and after render, check if that id is rendered so we know\n * if we can use it in places such as `aria-labelledby`.\n *\n * @param partId - The unique id for the component part\n *\n * @example\n * const { ref, id } = useOptionalPart<HTMLInputElement>(`${id}-label`)\n */\n\nexport function useOptionalPart(partId) {\n  var [id, setId] = React.useState(null);\n  var ref = React.useCallback(node => {\n    setId(node ? partId : null);\n  }, [partId]);\n  return {\n    ref,\n    id,\n    isRendered: Boolean(id)\n  };\n}","map":{"version":3,"names":["React","defaultIdContext","prefix","Math","round","random","current","IdContext","createContext","IdProvider","memo","_ref","children","currentContext","useContext","isRoot","context","useMemo","createElement","Provider","value","useId","idProp","filter","Boolean","join","useIds","_len","arguments","length","prefixes","Array","_key","id","map","useOptionalPart","partId","setId","useState","ref","useCallback","node","isRendered"],"sources":["/Users/cavenlim/CavenLim site backup/node_modules/@chakra-ui/hooks/src/use-id.ts"],"sourcesContent":["// This implementation is heavily inspired by react-aria's implementation\n\nimport * as React from \"react\"\n\ntype IdContextValue = {\n  prefix: number\n  current: number\n}\n\nconst defaultIdContext: IdContextValue = {\n  prefix: Math.round(Math.random() * 10000000000),\n  current: 0,\n}\n\nconst IdContext = React.createContext<IdContextValue>(defaultIdContext)\n\nexport const IdProvider: React.FC = React.memo(({ children }) => {\n  const currentContext = React.useContext(IdContext)\n  const isRoot = currentContext === defaultIdContext\n  const context: IdContextValue = React.useMemo(\n    () => ({\n      prefix: isRoot ? 0 : ++currentContext.prefix,\n      current: 0,\n    }),\n    [isRoot, currentContext],\n  )\n\n  return React.createElement(IdContext.Provider, { value: context }, children)\n})\n\nexport function useId(idProp?: string, prefix?: string): string {\n  const context = React.useContext(IdContext)\n  return React.useMemo(\n    () =>\n      idProp ||\n      [prefix, context.prefix, ++context.current].filter(Boolean).join(\"-\"),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [idProp, prefix],\n  )\n}\n\n/**\n * Reack hook to generate ids for use in compound components\n *\n * @param idProp the external id passed from the user\n * @param prefixes array of prefixes to use\n *\n * @example\n *\n * ```js\n * const [buttonId, menuId] = useIds(\"52\", \"button\", \"menu\")\n *\n * // buttonId will be `button-52`\n * // menuId will be `menu-52`\n * ```\n */\nexport function useIds(idProp?: string, ...prefixes: string[]) {\n  const id = useId(idProp)\n  return React.useMemo(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`)\n  }, [id, prefixes])\n}\n\n/**\n * Used to generate an id, and after render, check if that id is rendered so we know\n * if we can use it in places such as `aria-labelledby`.\n *\n * @param partId - The unique id for the component part\n *\n * @example\n * const { ref, id } = useOptionalPart<HTMLInputElement>(`${id}-label`)\n */\nexport function useOptionalPart<T = any>(partId: string) {\n  const [id, setId] = React.useState<string | null>(null)\n  const ref = React.useCallback(\n    (node: T) => {\n      setId(node ? partId : null)\n    },\n    [partId],\n  )\n  return { ref, id, isRendered: Boolean(id) }\n}\n"],"mappings":"AAAA;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAOA,IAAMC,gBAAgC,GAAG;EACvCC,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,WAA3B,CAD+B;EAEvCC,OAAO,EAAE;AAF8B,CAAzC;AAKA,IAAMC,SAAS,gBAAGP,KAAK,CAACQ,aAAN,CAAoCP,gBAApC,CAAlB;AAEA,OAAO,IAAMQ,UAAoB,gBAAGT,KAAK,CAACU,IAAN,CAAWC,IAAA,IAAkB;EAAA,IAAjB;IAAEC;EAAF,CAAiB,GAAAD,IAAA;EAC/D,IAAME,cAAc,GAAGb,KAAK,CAACc,UAAN,CAAiBP,SAAjB,CAAvB;EACA,IAAMQ,MAAM,GAAGF,cAAc,KAAKZ,gBAAlC;EACA,IAAMe,OAAuB,GAAGhB,KAAK,CAACiB,OAAN,CAC9B,OAAO;IACLf,MAAM,EAAEa,MAAM,GAAG,CAAH,GAAO,EAAEF,cAAc,CAACX,MADjC;IAELI,OAAO,EAAE;EAFJ,CAAP,CAD8B,EAK9B,CAACS,MAAD,EAASF,cAAT,CAL8B,CAAhC;EAQA,oBAAOb,KAAK,CAACkB,aAAN,CAAoBX,SAAS,CAACY,QAA9B,EAAwC;IAAEC,KAAK,EAAEJ;EAAT,CAAxC,EAA4DJ,QAA5D,CAAP;AACD,CAZmC,CAA7B;AAcP,OAAO,SAASS,KAATA,CAAeC,MAAf,EAAgCpB,MAAhC,EAAyD;EAC9D,IAAMc,OAAO,GAAGhB,KAAK,CAACc,UAAN,CAAiBP,SAAjB,CAAhB;EACA,OAAOP,KAAK,CAACiB,OAAN,CACL,MACEK,MAAM,IACN,CAACpB,MAAD,EAASc,OAAO,CAACd,MAAjB,EAAyB,EAAEc,OAAO,CAACV,OAAnC,EAA4CiB,MAA5C,CAAmDC,OAAnD,EAA4DC,IAA5D,CAAiE,GAAjE,CAHG;EAIL;EACA,CAACH,MAAD,EAASpB,MAAT,CALK,CAAP;AAOD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASwB,MAATA,CAAgBJ,MAAhB,EAAwD;EAAA,SAAAK,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAApBC,QAAoB,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAApBF,QAAoB,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;EAAA;EAC7D,IAAMC,EAAE,GAAGZ,KAAK,CAACC,MAAD,CAAhB;EACA,OAAOtB,KAAK,CAACiB,OAAN,CAAc,MAAM;IACzB,OAAOa,QAAQ,CAACI,GAAT,CAAchC,MAAD,IAAeA,MAAf,SAAyB+B,EAAtC,CAAP;EACD,CAFM,EAEJ,CAACA,EAAD,EAAKH,QAAL,CAFI,CAAP;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,eAATA,CAAkCC,MAAlC,EAAkD;EACvD,IAAM,CAACH,EAAD,EAAKI,KAAL,IAAcrC,KAAK,CAACsC,QAAN,CAA8B,IAA9B,CAApB;EACA,IAAMC,GAAG,GAAGvC,KAAK,CAACwC,WAAN,CACTC,IAAD,IAAa;IACXJ,KAAK,CAACI,IAAI,GAAGL,MAAH,GAAY,IAAjB,CAAL;EACD,CAHS,EAIV,CAACA,MAAD,CAJU,CAAZ;EAMA,OAAO;IAAEG,GAAF;IAAON,EAAP;IAAWS,UAAU,EAAElB,OAAO,CAACS,EAAD;EAA9B,CAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}