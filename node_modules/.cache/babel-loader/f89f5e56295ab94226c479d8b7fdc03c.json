{"ast":null,"code":"import _toConsumableArray from \"/Users/cavenlim/CavenLim site backup/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/cavenlim/CavenLim site backup/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useBoolean, useCallbackRef, useControllableState, useId, useLatestRef, usePanGesture, useUpdateEffect } from \"@chakra-ui/hooks\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { ariaAttr, callAllHandlers, clampValue, dataAttr, focus, normalizeEventKey, percentToValue, roundValueToStep, valueToPercent } from \"@chakra-ui/utils\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { getIds, getIsReversed, getStyles, orient } from \"./slider-utils\";\n/**\n * React hook that implements an accessible range slider.\n *\n * It is an alternative to `<input type=\"range\" />`, and returns\n * prop getters for the component parts\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#slider\n */\n\nexport function useRangeSlider(props) {\n  var _props$min = props.min,\n      min = _props$min === void 0 ? 0 : _props$min,\n      _props$max = props.max,\n      max = _props$max === void 0 ? 100 : _props$max,\n      onChange = props.onChange,\n      valueProp = props.value,\n      defaultValue = props.defaultValue,\n      isReversedProp = props.isReversed,\n      _props$direction = props.direction,\n      direction = _props$direction === void 0 ? \"ltr\" : _props$direction,\n      _props$orientation = props.orientation,\n      orientation = _props$orientation === void 0 ? \"horizontal\" : _props$orientation,\n      idProp = props.id,\n      isDisabled = props.isDisabled,\n      isReadOnly = props.isReadOnly,\n      onChangeStartProp = props.onChangeStart,\n      onChangeEndProp = props.onChangeEnd,\n      _props$step = props.step,\n      step = _props$step === void 0 ? 1 : _props$step,\n      getAriaValueTextProp = props.getAriaValueText,\n      ariaValueText = props[\"aria-valuetext\"],\n      ariaLabel = props[\"aria-label\"],\n      ariaLabelledBy = props[\"aria-labelledby\"],\n      name = props.name,\n      _props$focusThumbOnCh = props.focusThumbOnChange,\n      focusThumbOnChange = _props$focusThumbOnCh === void 0 ? true : _props$focusThumbOnCh,\n      _props$minStepsBetwee = props.minStepsBetweenThumbs,\n      minStepsBetweenThumbs = _props$minStepsBetwee === void 0 ? 0 : _props$minStepsBetwee,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"min\", \"max\", \"onChange\", \"value\", \"defaultValue\", \"isReversed\", \"direction\", \"orientation\", \"id\", \"isDisabled\", \"isReadOnly\", \"onChangeStart\", \"onChangeEnd\", \"step\", \"getAriaValueText\", \"aria-valuetext\", \"aria-label\", \"aria-labelledby\", \"name\", \"focusThumbOnChange\", \"minStepsBetweenThumbs\"]);\n\n  var onChangeStart = useCallbackRef(onChangeStartProp);\n  var onChangeEnd = useCallbackRef(onChangeEndProp);\n  var getAriaValueText = useCallbackRef(getAriaValueTextProp);\n  var isReversed = getIsReversed({\n    isReversed: isReversedProp,\n    direction: direction,\n    orientation: orientation\n  });\n\n  var _useControllableState = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue != null ? defaultValue : [25, 75],\n    onChange: onChange\n  }),\n      _useControllableState2 = _slicedToArray(_useControllableState, 2),\n      valueState = _useControllableState2[0],\n      setValue = _useControllableState2[1];\n\n  if (!Array.isArray(valueState)) {\n    throw new TypeError(\"[range-slider] You passed an invalid value for `value` or `defaultValue`, expected `Array` but got `\" + typeof valueState + \"`\");\n  }\n\n  var _useBoolean = useBoolean(),\n      _useBoolean2 = _slicedToArray(_useBoolean, 2),\n      isDragging = _useBoolean2[0],\n      setDragging = _useBoolean2[1];\n\n  var _useBoolean3 = useBoolean(),\n      _useBoolean4 = _slicedToArray(_useBoolean3, 2),\n      isFocused = _useBoolean4[0],\n      setFocused = _useBoolean4[1];\n\n  var _useState = useState(-1),\n      _useState2 = _slicedToArray(_useState, 2),\n      activeIndex = _useState2[0],\n      setActiveIndex = _useState2[1];\n\n  var eventSourceRef = useRef(null);\n  var isInteractive = !(isDisabled || isReadOnly);\n  var initialValue = useRef(valueState);\n  var value = valueState.map(function (val) {\n    return clampValue(val, min, max);\n  });\n  var valueRef = useLatestRef(value);\n  var spacing = minStepsBetweenThumbs * step;\n  var valueBounds = getValueBounds(value, min, max, spacing);\n  var reversedValue = value.map(function (val) {\n    return max - val + min;\n  });\n  var thumbValues = isReversed ? reversedValue : value;\n  var thumbPercents = thumbValues.map(function (val) {\n    return valueToPercent(val, min, max);\n  });\n  var isVertical = orientation === \"vertical\";\n\n  var _useState3 = useState(Array.from({\n    length: value.length\n  }).map(function () {\n    return {\n      width: 0,\n      height: 0\n    };\n  })),\n      _useState4 = _slicedToArray(_useState3, 2),\n      thumbRects = _useState4[0],\n      setThumbRects = _useState4[1];\n\n  useEffect(function () {\n    var _rootRef$current;\n\n    if (!rootRef.current) return;\n    var thumbs = Array.from((_rootRef$current = rootRef.current) == null ? void 0 : _rootRef$current.querySelectorAll(\"[role=slider]\"));\n    var rects = thumbs.map(function (el) {\n      return {\n        width: el.offsetWidth,\n        height: el.offsetHeight\n      };\n    });\n    if (rects.length) setThumbRects(rects);\n  }, []);\n  /**\n   * Let's keep a reference to the slider track and thumb\n   */\n\n  var trackRef = useRef(null);\n  var rootRef = useRef(null);\n  var uuid = useId(idProp);\n  var ids = getIds(uuid);\n  var getValueFromPointer = useCallback(function (event) {\n    var _event$touches$, _event$touches;\n\n    if (!trackRef.current) return;\n    eventSourceRef.current = \"pointer\";\n    var rect = trackRef.current.getBoundingClientRect();\n\n    var _ref = (_event$touches$ = (_event$touches = event.touches) == null ? void 0 : _event$touches[0]) != null ? _event$touches$ : event,\n        clientX = _ref.clientX,\n        clientY = _ref.clientY;\n\n    var diff = isVertical ? rect.bottom - clientY : clientX - rect.left;\n    var length = isVertical ? rect.height : rect.width;\n    var percent = diff / length;\n    if (isReversed) percent = 1 - percent;\n    return percentToValue(percent, min, max);\n  }, [isVertical, isReversed, max, min]);\n  var tenSteps = (max - min) / 10;\n  var oneStep = step || (max - min) / 100;\n  var actions = useMemo(function () {\n    return {\n      setValueAtIndex: function setValueAtIndex(index, val) {\n        if (!isInteractive) return;\n        var bounds = valueBounds[index];\n        val = parseFloat(roundValueToStep(val, bounds.min, oneStep));\n        val = clampValue(val, bounds.min, bounds.max);\n\n        var next = _toConsumableArray(value);\n\n        next[index] = val;\n        setValue(next);\n      },\n      setActiveIndex: setActiveIndex,\n      stepUp: function stepUp(index, step) {\n        if (step === void 0) {\n          step = oneStep;\n        }\n\n        var valueAtIndex = value[index];\n        var next = isReversed ? valueAtIndex - step : valueAtIndex + step;\n        actions.setValueAtIndex(index, next);\n      },\n      stepDown: function stepDown(index, step) {\n        if (step === void 0) {\n          step = oneStep;\n        }\n\n        var valueAtIndex = value[index];\n        var next = isReversed ? valueAtIndex + step : valueAtIndex - step;\n        actions.setValueAtIndex(index, next);\n      },\n      reset: function reset() {\n        return setValue(initialValue.current);\n      }\n    };\n  }, [oneStep, value, isReversed, setValue, isInteractive, valueBounds]);\n  /**\n   * Keyboard interaction to ensure users can operate\n   * the slider using only their keyboard.\n   */\n\n  var onKeyDown = useCallback(function (event) {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      ArrowRight: function ArrowRight() {\n        return actions.stepUp(activeIndex);\n      },\n      ArrowUp: function ArrowUp() {\n        return actions.stepUp(activeIndex);\n      },\n      ArrowLeft: function ArrowLeft() {\n        return actions.stepDown(activeIndex);\n      },\n      ArrowDown: function ArrowDown() {\n        return actions.stepDown(activeIndex);\n      },\n      PageUp: function PageUp() {\n        return actions.stepUp(activeIndex, tenSteps);\n      },\n      PageDown: function PageDown() {\n        return actions.stepDown(activeIndex, tenSteps);\n      },\n      Home: function Home() {\n        var value = valueBounds[activeIndex].min;\n        actions.setValueAtIndex(activeIndex, value);\n      },\n      End: function End() {\n        var value = valueBounds[activeIndex].max;\n        actions.setValueAtIndex(activeIndex, value);\n      }\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n      eventSourceRef.current = \"keyboard\";\n    }\n  }, [actions, activeIndex, tenSteps, valueBounds]);\n  /**\n   * Compute styles for all component parts.\n   */\n\n  var _useMemo = useMemo(function () {\n    return getStyles({\n      isReversed: isReversed,\n      orientation: orientation,\n      thumbRects: thumbRects,\n      thumbPercents: thumbPercents\n    });\n  }, [isReversed, orientation, thumbPercents, thumbRects]),\n      getThumbStyle = _useMemo.getThumbStyle,\n      rootStyle = _useMemo.rootStyle,\n      trackStyle = _useMemo.trackStyle,\n      innerTrackStyle = _useMemo.innerTrackStyle;\n\n  var focusThumb = useCallback(function (index) {\n    var idx = index != null ? index : activeIndex;\n\n    if (idx !== -1 && focusThumbOnChange) {\n      var _rootRef$current2;\n\n      var id = ids.getThumb(idx);\n      var thumb = (_rootRef$current2 = rootRef.current) == null ? void 0 : _rootRef$current2.ownerDocument.getElementById(id);\n\n      if (thumb) {\n        setTimeout(function () {\n          return focus(thumb);\n        });\n      }\n    }\n  }, [focusThumbOnChange, activeIndex, ids]);\n  useUpdateEffect(function () {\n    if (eventSourceRef.current === \"keyboard\") {\n      onChangeEnd == null ? void 0 : onChangeEnd(valueRef.current);\n    }\n  }, [value, onChangeEnd]);\n\n  var _onPanSessionStart = function onPanSessionStart(event) {\n    var pointValue = getValueFromPointer(event) || 0;\n    var distances = value.map(function (val) {\n      return Math.abs(val - pointValue);\n    });\n    var isThumbStacked = new Set(distances).size !== distances.length;\n    var closest = Math.min.apply(Math, _toConsumableArray(distances));\n    var index = distances.indexOf(closest); // when two thumbs are stacked and the user clicks at a point larger than\n    // their values, pick the next closest thumb\n\n    if (isThumbStacked && pointValue > value[index]) {\n      index++;\n    }\n\n    setActiveIndex(index);\n    actions.setValueAtIndex(index, pointValue);\n    focusThumb(index);\n  };\n\n  var _onPan = function onPan(event) {\n    var pointValue = getValueFromPointer(event) || 0;\n    setActiveIndex(activeIndex);\n    actions.setValueAtIndex(activeIndex, pointValue);\n    focusThumb(activeIndex);\n  };\n\n  usePanGesture(rootRef, {\n    onPanSessionStart: function onPanSessionStart(event) {\n      if (!isInteractive) return;\n      setDragging.on();\n\n      _onPanSessionStart(event);\n\n      onChangeStart == null ? void 0 : onChangeStart(valueRef.current);\n    },\n    onPanSessionEnd: function onPanSessionEnd() {\n      if (!isInteractive) return;\n      setDragging.off();\n      onChangeEnd == null ? void 0 : onChangeEnd(valueRef.current);\n    },\n    onPan: function onPan(event) {\n      if (!isInteractive) return;\n\n      _onPan(event);\n    }\n  });\n  var getRootProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, htmlProps, {\n      id: ids.root,\n      ref: mergeRefs(ref, rootRef),\n      tabIndex: -1,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"data-focused\": dataAttr(isFocused),\n      style: _extends({}, props.style, rootStyle)\n    });\n  }, [htmlProps, isDisabled, isFocused, rootStyle, ids]);\n  var getTrackProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(ref, trackRef),\n      id: ids.track,\n      \"data-disabled\": dataAttr(isDisabled),\n      style: _extends({}, props.style, trackStyle)\n    });\n  }, [isDisabled, trackStyle, ids]);\n  var getInnerTrackProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: ref,\n      id: ids.innerTrack,\n      style: _extends({}, props.style, innerTrackStyle)\n    });\n  }, [innerTrackStyle, ids]);\n  var getThumbProps = useCallback(function (props, ref) {\n    var _getAriaValueText;\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var index = props.index,\n        rest = _objectWithoutPropertiesLoose(props, [\"index\"]);\n\n    var _value = value[index];\n\n    if (_value == null) {\n      throw new TypeError(\"[range-slider > thumb] Cannot find value at index `\" + index + \"`. The `value` or `defaultValue` length is : \" + value.length);\n    }\n\n    var bounds = valueBounds[index];\n    return _extends({}, rest, {\n      ref: ref,\n      role: \"slider\",\n      tabIndex: isInteractive ? 0 : undefined,\n      id: ids.getThumb(index),\n      \"data-active\": dataAttr(isDragging && activeIndex === index),\n      \"aria-valuetext\": (_getAriaValueText = getAriaValueText == null ? void 0 : getAriaValueText(_value)) != null ? _getAriaValueText : ariaValueText == null ? void 0 : ariaValueText[index],\n      \"aria-valuemin\": bounds.min,\n      \"aria-valuemax\": bounds.max,\n      \"aria-valuenow\": _value,\n      \"aria-orientation\": orientation,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"aria-readonly\": ariaAttr(isReadOnly),\n      \"aria-label\": ariaLabel == null ? void 0 : ariaLabel[index],\n      \"aria-labelledby\": ariaLabel != null && ariaLabel[index] ? undefined : ariaLabelledBy == null ? void 0 : ariaLabelledBy[index],\n      style: _extends({}, props.style, getThumbStyle(index)),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, function () {\n        setFocused.on();\n        setActiveIndex(index);\n      }),\n      onBlur: callAllHandlers(props.onBlur, function () {\n        setFocused.off();\n        setActiveIndex(-1);\n      })\n    });\n  }, [ids, value, valueBounds, isInteractive, isDragging, activeIndex, getAriaValueText, ariaValueText, orientation, isDisabled, isReadOnly, ariaLabel, ariaLabelledBy, getThumbStyle, onKeyDown, setFocused]);\n  var getOutputProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: ref,\n      id: ids.output,\n      htmlFor: value.map(function (v, i) {\n        return ids.getThumb(i);\n      }).join(\" \"),\n      \"aria-live\": \"off\"\n    });\n  }, [ids, value]);\n  var getMarkerProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var _props = props,\n        v = _props.value,\n        rest = _objectWithoutPropertiesLoose(props, [\"value\"]);\n\n    var isInRange = !(v < min || v > max);\n    var isHighlighted = v >= value[0] && v <= value[value.length - 1];\n    var percent = valueToPercent(v, min, max);\n    percent = isReversed ? 100 - percent : percent;\n\n    var markerStyle = _extends({\n      position: \"absolute\",\n      pointerEvents: \"none\"\n    }, orient({\n      orientation: orientation,\n      vertical: {\n        bottom: percent + \"%\"\n      },\n      horizontal: {\n        left: percent + \"%\"\n      }\n    }));\n\n    return _extends({}, rest, {\n      ref: ref,\n      id: ids.getMarker(props.value),\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(!isInRange),\n      \"data-highlighted\": dataAttr(isHighlighted),\n      style: _extends({}, props.style, markerStyle)\n    });\n  }, [isDisabled, isReversed, max, min, orientation, value, ids]);\n  var getInputProps = useCallback(function (props, ref) {\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var index = props.index,\n        rest = _objectWithoutPropertiesLoose(props, [\"index\"]);\n\n    return _extends({}, rest, {\n      ref: ref,\n      id: ids.getInput(index),\n      type: \"hidden\",\n      value: value[index],\n      name: Array.isArray(name) ? name[index] : name + \"-\" + index\n    });\n  }, [name, value, ids]);\n  return {\n    state: {\n      value: value,\n      isFocused: isFocused,\n      isDragging: isDragging,\n      getThumbPercent: function getThumbPercent(i) {\n        return thumbPercents[i];\n      },\n      getThumbMinValue: function getThumbMinValue(i) {\n        return valueBounds[i].min;\n      },\n      getThumbMaxValue: function getThumbMaxValue(i) {\n        return valueBounds[i].max;\n      }\n    },\n    actions: actions,\n    getRootProps: getRootProps,\n    getTrackProps: getTrackProps,\n    getInnerTrackProps: getInnerTrackProps,\n    getThumbProps: getThumbProps,\n    getMarkerProps: getMarkerProps,\n    getInputProps: getInputProps,\n    getOutputProps: getOutputProps\n  };\n}\n\nvar getValueBounds = function getValueBounds(arr, min, max, spacing) {\n  return arr.map(function (v, i) {\n    var _min = i === 0 ? min : arr[i - 1] + spacing;\n\n    var _max = i === arr.length - 1 ? max : arr[i + 1] - spacing;\n\n    return {\n      min: _min,\n      max: _max\n    };\n  });\n};","map":{"version":3,"sources":["../../src/use-range-slider.ts"],"names":["min","max","value","isReversed","direction","orientation","id","onChangeStart","onChangeEnd","step","getAriaValueText","focusThumbOnChange","minStepsBetweenThumbs","useCallbackRef","getIsReversed","useControllableState","defaultValue","onChange","Array","useBoolean","useState","eventSourceRef","useRef","isInteractive","isDisabled","initialValue","valueState","val","clampValue","valueRef","useLatestRef","spacing","valueBounds","getValueBounds","reversedValue","thumbValues","thumbPercents","valueToPercent","isVertical","length","width","height","useEffect","rootRef","thumbs","rects","el","offsetHeight","setThumbRects","trackRef","uuid","useId","ids","getIds","getValueFromPointer","useCallback","event","rect","clientY","diff","clientX","percent","percentToValue","tenSteps","oneStep","actions","useMemo","setValueAtIndex","bounds","parseFloat","roundValueToStep","next","setValue","setActiveIndex","stepUp","valueAtIndex","stepDown","reset","onKeyDown","eventKey","normalizeEventKey","keyMap","ArrowRight","ArrowUp","ArrowLeft","ArrowDown","PageUp","PageDown","Home","End","action","innerTrackStyle","getStyles","thumbRects","focusThumb","index","idx","thumb","setTimeout","focus","useUpdateEffect","onPanSessionStart","pointValue","distances","Math","isThumbStacked","closest","onPan","usePanGesture","setDragging","onPanSessionEnd","getRootProps","props","ref","mergeRefs","tabIndex","ariaAttr","dataAttr","style","getTrackProps","getInnerTrackProps","getThumbProps","_value","role","isDragging","activeIndex","ariaValueText","ariaLabel","ariaLabelledBy","getThumbStyle","callAllHandlers","onFocus","setFocused","onBlur","getOutputProps","htmlFor","getMarkerProps","v","isInRange","isHighlighted","markerStyle","position","pointerEvents","orient","vertical","bottom","horizontal","left","getInputProps","type","name","state","isFocused","getThumbPercent","i","getThumbMinValue","getThumbMaxValue","_min","arr","_max"],"mappings":"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","sourcesContent":["import {\n  useBoolean,\n  useCallbackRef,\n  useControllableState,\n  useId,\n  useLatestRef,\n  usePanGesture,\n  useUpdateEffect,\n} from \"@chakra-ui/hooks\"\nimport { EventKeyMap, mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport {\n  AnyPointerEvent,\n  ariaAttr,\n  callAllHandlers,\n  clampValue,\n  dataAttr,\n  focus,\n  normalizeEventKey,\n  percentToValue,\n  roundValueToStep,\n  valueToPercent,\n} from \"@chakra-ui/utils\"\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\"\nimport { getIds, getIsReversed, getStyles, orient } from \"./slider-utils\"\n\nexport interface UseRangeSliderProps {\n  /**\n   * The minimum allowed value of the slider. Cannot be greater than max.\n   * @default 0\n   */\n  min?: number\n  /**\n   * The maximum allowed value of the slider. Cannot be less than min.\n   * @default 100\n   */\n  max?: number\n  /**\n   * The step in which increments/decrements have to be made\n   * @default 1\n   */\n  step?: number\n  /**\n   * The value of the slider in controlled mode\n   */\n  value?: number[]\n  /**\n   * The initial value of the slider in uncontrolled mode\n   */\n  defaultValue?: number[]\n  /**\n   * orientation of the slider\n   * @default \"horizontal\"\n   */\n  orientation?: \"horizontal\" | \"vertical\"\n  /**\n   * If `true`, the value will be incremented or decremented in reverse.\n   */\n  isReversed?: boolean\n  /**\n   * Function called when the user starts selecting a new value (by dragging or clicking)\n   */\n  onChangeStart?(value: number[]): void\n  /**\n   * Function called when the user is done selecting a new value (by dragging or clicking)\n   */\n  onChangeEnd?(value: number[]): void\n  /**\n   * Function called whenever the slider value changes  (by dragging or clicking)\n   */\n  onChange?(value: number[]): void\n  /**\n   * The base `id` to use for the slider and its components\n   */\n  id?: string\n  /**\n   * The name attribute of the hidden `input` field.\n   * This is particularly useful in forms\n   */\n  name?: string | string[]\n  /**\n   * If `true`, the slider will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the slider will be in `read-only` state\n   */\n  isReadOnly?: boolean\n  /**\n   * Function that returns the `aria-valuetext` for screen readers.\n   * It is mostly used to generate a more human-readable\n   * representation of the value for assistive technologies\n   */\n  getAriaValueText?(value: number): string\n  /**\n   * If `false`, the slider handle will not capture focus when value changes.\n   * @default true\n   */\n  focusThumbOnChange?: boolean\n  /**\n   * The static string to use used for `aria-valuetext`\n   */\n  \"aria-valuetext\"?: string[]\n  /**\n   * The static string to use used for `aria-label`\n   * if no visible label is used.\n   */\n  \"aria-label\"?: string[]\n  /**\n   * The static string `aria-labelledby` that points to the\n   * ID of the element that serves as label for the slider\n   */\n  \"aria-labelledby\"?: string[]\n  /**\n   * The writing mode\n   */\n  direction?: \"ltr\" | \"rtl\"\n  /**\n   * The minimum distance between slider thumbs. Useful for preventing\n   * the thumbs from being too close together.\n   * @default 0\n   */\n  minStepsBetweenThumbs?: number\n}\n\n/**\n * React hook that implements an accessible range slider.\n *\n * It is an alternative to `<input type=\"range\" />`, and returns\n * prop getters for the component parts\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#slider\n */\nexport function useRangeSlider(props: UseRangeSliderProps) {\n  const {\n    min = 0,\n    max = 100,\n    onChange,\n    value: valueProp,\n    defaultValue,\n    isReversed: isReversedProp,\n    direction = \"ltr\",\n    orientation = \"horizontal\",\n    id: idProp,\n    isDisabled,\n    isReadOnly,\n    onChangeStart: onChangeStartProp,\n    onChangeEnd: onChangeEndProp,\n    step = 1,\n    getAriaValueText: getAriaValueTextProp,\n    \"aria-valuetext\": ariaValueText,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    name,\n    focusThumbOnChange = true,\n    minStepsBetweenThumbs = 0,\n    ...htmlProps\n  } = props\n\n  const onChangeStart = useCallbackRef(onChangeStartProp)\n  const onChangeEnd = useCallbackRef(onChangeEndProp)\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp)\n\n  const isReversed = getIsReversed({\n    isReversed: isReversedProp,\n    direction,\n    orientation,\n  })\n\n  const [valueState, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue ?? [25, 75],\n    onChange,\n  })\n\n  if (!Array.isArray(valueState)) {\n    throw new TypeError(\n      `[range-slider] You passed an invalid value for \\`value\\` or \\`defaultValue\\`, expected \\`Array\\` but got \\`${typeof valueState}\\``,\n    )\n  }\n\n  const [isDragging, setDragging] = useBoolean()\n  const [isFocused, setFocused] = useBoolean()\n  const [activeIndex, setActiveIndex] = useState(-1)\n  const eventSourceRef = useRef<\"pointer\" | \"keyboard\" | null>(null)\n  const isInteractive = !(isDisabled || isReadOnly)\n\n  const initialValue = useRef(valueState)\n  const value = valueState.map((val) => clampValue(val, min, max))\n  const valueRef = useLatestRef(value)\n\n  const spacing = minStepsBetweenThumbs * step\n  const valueBounds = getValueBounds(value, min, max, spacing)\n\n  const reversedValue = value.map((val) => max - val + min)\n  const thumbValues = isReversed ? reversedValue : value\n\n  const thumbPercents = thumbValues.map((val) => valueToPercent(val, min, max))\n\n  const isVertical = orientation === \"vertical\"\n\n  const [thumbRects, setThumbRects] = useState(\n    Array.from({ length: value.length }).map(() => ({ width: 0, height: 0 })),\n  )\n\n  useEffect(() => {\n    if (!rootRef.current) return\n\n    const thumbs = Array.from(\n      rootRef.current?.querySelectorAll<HTMLElement>(\"[role=slider]\"),\n    )\n    const rects = thumbs.map((el) => ({\n      width: el.offsetWidth,\n      height: el.offsetHeight,\n    }))\n\n    if (rects.length) setThumbRects(rects)\n  }, [])\n\n  /**\n   * Let's keep a reference to the slider track and thumb\n   */\n  const trackRef = useRef<HTMLElement>(null)\n  const rootRef = useRef<HTMLElement>(null)\n\n  const uuid = useId(idProp)\n  const ids = getIds(uuid)\n\n  const getValueFromPointer = useCallback(\n    (event) => {\n      if (!trackRef.current) return\n      eventSourceRef.current = \"pointer\"\n      const rect = trackRef.current.getBoundingClientRect()\n      const { clientX, clientY } = event.touches?.[0] ?? event\n\n      const diff = isVertical ? rect.bottom - clientY : clientX - rect.left\n      const length = isVertical ? rect.height : rect.width\n\n      let percent = diff / length\n      if (isReversed) percent = 1 - percent\n\n      return percentToValue(percent, min, max)\n    },\n    [isVertical, isReversed, max, min],\n  )\n\n  const tenSteps = (max - min) / 10\n  const oneStep = step || (max - min) / 100\n\n  const actions = useMemo(\n    () => ({\n      setValueAtIndex: (index: number, val: number) => {\n        if (!isInteractive) return\n        const bounds = valueBounds[index]\n        val = parseFloat(roundValueToStep(val, bounds.min, oneStep))\n        val = clampValue(val, bounds.min, bounds.max)\n        const next = [...value]\n        next[index] = val\n        setValue(next)\n      },\n      setActiveIndex,\n      stepUp: (index: number, step = oneStep) => {\n        const valueAtIndex = value[index]\n        const next = isReversed ? valueAtIndex - step : valueAtIndex + step\n        actions.setValueAtIndex(index, next)\n      },\n      stepDown: (index: number, step = oneStep) => {\n        const valueAtIndex = value[index]\n        const next = isReversed ? valueAtIndex + step : valueAtIndex - step\n        actions.setValueAtIndex(index, next)\n      },\n      reset: () => setValue(initialValue.current),\n    }),\n    [oneStep, value, isReversed, setValue, isInteractive, valueBounds],\n  )\n\n  /**\n   * Keyboard interaction to ensure users can operate\n   * the slider using only their keyboard.\n   */\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n      const keyMap: EventKeyMap = {\n        ArrowRight: () => actions.stepUp(activeIndex),\n        ArrowUp: () => actions.stepUp(activeIndex),\n        ArrowLeft: () => actions.stepDown(activeIndex),\n        ArrowDown: () => actions.stepDown(activeIndex),\n        PageUp: () => actions.stepUp(activeIndex, tenSteps),\n        PageDown: () => actions.stepDown(activeIndex, tenSteps),\n        Home: () => {\n          const { min: value } = valueBounds[activeIndex]\n          actions.setValueAtIndex(activeIndex, value)\n        },\n        End: () => {\n          const { max: value } = valueBounds[activeIndex]\n          actions.setValueAtIndex(activeIndex, value)\n        },\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n        eventSourceRef.current = \"keyboard\"\n      }\n    },\n    [actions, activeIndex, tenSteps, valueBounds],\n  )\n\n  /**\n   * Compute styles for all component parts.\n   */\n  const { getThumbStyle, rootStyle, trackStyle, innerTrackStyle } = useMemo(\n    () =>\n      getStyles({\n        isReversed,\n        orientation,\n        thumbRects,\n        thumbPercents,\n      }),\n    [isReversed, orientation, thumbPercents, thumbRects],\n  )\n\n  const focusThumb = useCallback(\n    (index?: number) => {\n      const idx = index ?? activeIndex\n      if (idx !== -1 && focusThumbOnChange) {\n        const id = ids.getThumb(idx)\n        const thumb = rootRef.current?.ownerDocument.getElementById(id)\n        if (thumb) {\n          setTimeout(() => focus(thumb))\n        }\n      }\n    },\n    [focusThumbOnChange, activeIndex, ids],\n  )\n\n  useUpdateEffect(() => {\n    if (eventSourceRef.current === \"keyboard\") {\n      onChangeEnd?.(valueRef.current)\n    }\n  }, [value, onChangeEnd])\n\n  const onPanSessionStart = (event: AnyPointerEvent) => {\n    const pointValue = getValueFromPointer(event) || 0\n    const distances = value.map((val) => Math.abs(val - pointValue))\n    const isThumbStacked = new Set(distances).size !== distances.length\n    const closest = Math.min(...distances)\n    let index = distances.indexOf(closest)\n    // when two thumbs are stacked and the user clicks at a point larger than\n    // their values, pick the next closest thumb\n    if (isThumbStacked && pointValue > value[index]) {\n      index++\n    }\n    setActiveIndex(index)\n    actions.setValueAtIndex(index, pointValue)\n    focusThumb(index)\n  }\n\n  const onPan = (event: AnyPointerEvent) => {\n    const pointValue = getValueFromPointer(event) || 0\n    setActiveIndex(activeIndex)\n    actions.setValueAtIndex(activeIndex, pointValue)\n    focusThumb(activeIndex)\n  }\n\n  usePanGesture(rootRef, {\n    onPanSessionStart(event) {\n      if (!isInteractive) return\n      setDragging.on()\n      onPanSessionStart(event)\n      onChangeStart?.(valueRef.current)\n    },\n    onPanSessionEnd() {\n      if (!isInteractive) return\n      setDragging.off()\n      onChangeEnd?.(valueRef.current)\n    },\n    onPan(event) {\n      if (!isInteractive) return\n      onPan(event)\n    },\n  })\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ...htmlProps,\n      id: ids.root,\n      ref: mergeRefs(ref, rootRef),\n      tabIndex: -1,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"data-focused\": dataAttr(isFocused),\n      style: { ...props.style, ...rootStyle },\n    }),\n    [htmlProps, isDisabled, isFocused, rootStyle, ids],\n  )\n\n  const getTrackProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, trackRef),\n      id: ids.track,\n      \"data-disabled\": dataAttr(isDisabled),\n      style: { ...props.style, ...trackStyle },\n    }),\n    [isDisabled, trackStyle, ids],\n  )\n\n  const getInnerTrackProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      id: ids.innerTrack,\n      style: { ...props.style, ...innerTrackStyle },\n    }),\n    [innerTrackStyle, ids],\n  )\n\n  const getThumbProps = useCallback(\n    (props, ref = null) => {\n      const { index, ...rest } = props\n\n      const _value = value[index]\n      if (_value == null) {\n        throw new TypeError(\n          `[range-slider > thumb] Cannot find value at index \\`${index}\\`. The \\`value\\` or \\`defaultValue\\` length is : ${value.length}`,\n        )\n      }\n      const bounds = valueBounds[index]\n\n      return {\n        ...rest,\n        ref,\n        role: \"slider\",\n        tabIndex: isInteractive ? 0 : undefined,\n        id: ids.getThumb(index),\n        \"data-active\": dataAttr(isDragging && activeIndex === index),\n        \"aria-valuetext\": getAriaValueText?.(_value) ?? ariaValueText?.[index],\n        \"aria-valuemin\": bounds.min,\n        \"aria-valuemax\": bounds.max,\n        \"aria-valuenow\": _value,\n        \"aria-orientation\": orientation,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        \"aria-readonly\": ariaAttr(isReadOnly),\n        \"aria-label\": ariaLabel?.[index],\n        \"aria-labelledby\": ariaLabel?.[index]\n          ? undefined\n          : ariaLabelledBy?.[index],\n        style: { ...props.style, ...getThumbStyle(index) },\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(props.onFocus, () => {\n          setFocused.on()\n          setActiveIndex(index)\n        }),\n        onBlur: callAllHandlers(props.onBlur, () => {\n          setFocused.off()\n          setActiveIndex(-1)\n        }),\n      }\n    },\n    [\n      ids,\n      value,\n      valueBounds,\n      isInteractive,\n      isDragging,\n      activeIndex,\n      getAriaValueText,\n      ariaValueText,\n      orientation,\n      isDisabled,\n      isReadOnly,\n      ariaLabel,\n      ariaLabelledBy,\n      getThumbStyle,\n      onKeyDown,\n      setFocused,\n    ],\n  )\n\n  const getOutputProps = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      id: ids.output,\n      htmlFor: value.map((v, i) => ids.getThumb(i)).join(\" \"),\n      \"aria-live\": \"off\",\n    }),\n    [ids, value],\n  )\n\n  const getMarkerProps: PropGetter<any, { value?: any }> = useCallback(\n    (props = {}, ref = null) => {\n      const { value: v, ...rest } = props\n\n      const isInRange = !(v < min || v > max)\n      const isHighlighted = v >= value[0] && v <= value[value.length - 1]\n\n      let percent = valueToPercent(v, min, max)\n      percent = isReversed ? 100 - percent : percent\n\n      const markerStyle: React.CSSProperties = {\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        ...orient({\n          orientation,\n          vertical: { bottom: `${percent}%` },\n          horizontal: { left: `${percent}%` },\n        }),\n      }\n\n      return {\n        ...rest,\n        ref,\n        id: ids.getMarker(props.value),\n        role: \"presentation\",\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(!isInRange),\n        \"data-highlighted\": dataAttr(isHighlighted),\n        style: {\n          ...props.style,\n          ...markerStyle,\n        },\n      }\n    },\n    [isDisabled, isReversed, max, min, orientation, value, ids],\n  )\n\n  const getInputProps = useCallback(\n    (props, ref = null) => {\n      const { index, ...rest } = props\n      return {\n        ...rest,\n        ref,\n        id: ids.getInput(index),\n        type: \"hidden\",\n        value: value[index],\n        name: Array.isArray(name) ? name[index] : `${name}-${index}`,\n      }\n    },\n    [name, value, ids],\n  )\n\n  return {\n    state: {\n      value,\n      isFocused,\n      isDragging,\n      getThumbPercent: (i: number) => thumbPercents[i],\n      getThumbMinValue: (i: number) => valueBounds[i].min,\n      getThumbMaxValue: (i: number) => valueBounds[i].max,\n    },\n    actions,\n    getRootProps,\n    getTrackProps,\n    getInnerTrackProps,\n    getThumbProps,\n    getMarkerProps,\n    getInputProps,\n    getOutputProps,\n  }\n}\n\nexport type UseRangeSliderReturn = ReturnType<typeof useRangeSlider>\n\nconst getValueBounds = (\n  arr: number[],\n  min: number,\n  max: number,\n  spacing: number,\n) =>\n  arr.map((v, i) => {\n    const _min = i === 0 ? min : arr[i - 1] + spacing\n    const _max = i === arr.length - 1 ? max : arr[i + 1] - spacing\n    return { min: _min, max: _max }\n  })\n"]},"metadata":{},"sourceType":"module"}