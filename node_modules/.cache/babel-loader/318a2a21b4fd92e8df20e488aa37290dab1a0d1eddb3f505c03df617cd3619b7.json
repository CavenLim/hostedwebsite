{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\r\n * Used to define the anatomy/parts of a component in a way that provides\r\n * a consistent API for `className`, css selector and `theming`.\r\n */\nexport class Anatomy {\n  constructor(name) {\n    var _this = this;\n    this.name = name;\n    _defineProperty(this, \"map\", {});\n    _defineProperty(this, \"called\", false);\n    _defineProperty(this, \"assert\", () => {\n      if (!this.called) {\n        this.called = true;\n        return;\n      }\n      throw new Error(\"[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?\");\n    });\n    _defineProperty(this, \"parts\", function () {\n      _this.assert();\n      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n        values[_key] = arguments[_key];\n      }\n      for (var part of values) {\n        ;\n        _this.map[part] = _this.toPart(part);\n      }\n      return _this;\n    });\n    _defineProperty(this, \"extend\", function () {\n      for (var _len2 = arguments.length, parts = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        parts[_key2] = arguments[_key2];\n      }\n      for (var part of parts) {\n        if (part in _this.map) continue;\n        _this.map[part] = _this.toPart(part);\n      }\n      return _this;\n    });\n    _defineProperty(this, \"toPart\", part => {\n      var el = [\"container\", \"root\"].includes(part != null ? part : \"\") ? [this.name] : [this.name, part];\n      var attr = el.filter(Boolean).join(\"__\");\n      var className = \"chakra-\" + attr;\n      var partObj = {\n        className,\n        selector: \".\" + className,\n        toString: () => part\n      };\n      return partObj;\n    });\n    _defineProperty(this, \"__type\", {});\n  }\n  /**\r\n   * Prevents user from calling `.parts` multiple times.\r\n   * It should only be called once.\r\n   */\n\n  /**\r\n   * Get all selectors for the component anatomy\r\n   */\n  get selectors() {\n    var value = Object.fromEntries(Object.entries(this.map).map(_ref => {\n      var [key, part] = _ref;\n      return [key, part.selector];\n    }));\n    return value;\n  }\n  /**\r\n   * Get all classNames for the component anatomy\r\n   */\n\n  get classNames() {\n    var value = Object.fromEntries(Object.entries(this.map).map(_ref2 => {\n      var [key, part] = _ref2;\n      return [key, part.className];\n    }));\n    return value;\n  }\n  /**\r\n   * Get all parts as array of string\r\n   */\n\n  get keys() {\n    return Object.keys(this.map);\n  }\n  /**\r\n   * Creates the part object for the given part\r\n   */\n}\nexport function anatomy(name) {\n  return new Anatomy(name);\n}","map":{"version":3,"names":["Anatomy","constructor","name","_this","_defineProperty","called","Error","assert","_len","arguments","length","values","Array","_key","part","map","toPart","_len2","parts","_key2","el","includes","attr","filter","Boolean","join","className","partObj","selector","toString","selectors","value","Object","fromEntries","entries","_ref","key","classNames","_ref2","keys","anatomy"],"sources":["C:\\Code Respositories\\hostedwebsite\\node_modules\\@chakra-ui\\theme-tools\\src\\anatomy.ts"],"sourcesContent":["/**\n * Used to define the anatomy/parts of a component in a way that provides\n * a consistent API for `className`, css selector and `theming`.\n */\nexport class Anatomy<T extends string = string> {\n  private map: Record<T, Part> = {} as Record<T, Part>\n  private called = false\n\n  constructor(private name: string) {}\n\n  /**\n   * Prevents user from calling `.parts` multiple times.\n   * It should only be called once.\n   */\n  private assert = () => {\n    if (!this.called) {\n      this.called = true\n      return\n    }\n\n    throw new Error(\n      \"[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?\",\n    )\n  }\n\n  /**\n   * Add the core parts of the components\n   */\n  public parts = <V extends string>(...values: V[]) => {\n    this.assert()\n    for (const part of values) {\n      ;(this.map as any)[part] = this.toPart(part)\n    }\n    return (this as unknown) as Omit<Anatomy<V>, \"parts\">\n  }\n\n  /**\n   * Extend the component anatomy to includes new parts\n   */\n  public extend = <U extends string>(...parts: U[]) => {\n    for (const part of parts) {\n      if (part in this.map) continue\n      ;(this.map as any)[part] = this.toPart(part)\n    }\n    return (this as unknown) as Omit<Anatomy<T | U>, \"parts\">\n  }\n\n  /**\n   * Get all selectors for the component anatomy\n   */\n  get selectors() {\n    const value = Object.fromEntries(\n      Object.entries(this.map).map(([key, part]) => [\n        key,\n        (part as any).selector,\n      ]),\n    )\n    return value as Record<T, string>\n  }\n\n  /**\n   * Get all classNames for the component anatomy\n   */\n  get classNames() {\n    const value = Object.fromEntries(\n      Object.entries(this.map).map(([key, part]) => [\n        key,\n        (part as any).className,\n      ]),\n    )\n    return value as Record<T, string>\n  }\n\n  /**\n   * Get all parts as array of string\n   */\n  get keys() {\n    return Object.keys(this.map) as T[]\n  }\n\n  /**\n   * Creates the part object for the given part\n   */\n  toPart = (part: string) => {\n    const el = [\"container\", \"root\"].includes(part ?? \"\")\n      ? [this.name]\n      : [this.name, part]\n    const attr = el.filter(Boolean).join(\"__\")\n    const className = `chakra-${attr}`\n\n    const partObj = {\n      className,\n      selector: `.${className}`,\n      toString: () => part,\n    }\n\n    return partObj as typeof partObj & string\n  }\n\n  /**\n   * Used to get the derived type of the anatomy\n   */\n  __type = {} as T\n}\n\ntype Part = {\n  className: string\n  selector: string\n  toString: () => string\n}\n\nexport function anatomy(name: string) {\n  return new Anatomy(name)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}