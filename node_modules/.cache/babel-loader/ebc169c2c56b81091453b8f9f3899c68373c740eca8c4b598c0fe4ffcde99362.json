{"ast":null,"code":"import { TinyColor, readability, isReadable, random } from \"@ctrl/tinycolor\";\nimport { memoizedGet as get, isEmptyObject } from \"@chakra-ui/utils\";\n/**\r\n * Get the color raw value from theme\r\n * @param theme - the theme object\r\n * @param color - the color path (\"green.200\")\r\n * @param fallback - the fallback color\r\n */\n\nexport var getColor = (theme, color, fallback) => {\n  var hex = get(theme, \"colors.\" + color, color);\n  var {\n    isValid\n  } = new TinyColor(hex);\n  return isValid ? hex : fallback;\n};\n/**\r\n * Determines if the tone of given color is \"light\" or \"dark\"\r\n * @param color - the color in hex, rgb, or hsl\r\n */\n\nexport var tone = color => theme => {\n  var hex = getColor(theme, color);\n  var isDark = new TinyColor(hex).isDark();\n  return isDark ? \"dark\" : \"light\";\n};\n/**\r\n * Determines if a color tone is \"dark\"\r\n * @param color - the color in hex, rgb, or hsl\r\n */\n\nexport var isDark = color => theme => tone(color)(theme) === \"dark\";\n/**\r\n * Determines if a color tone is \"light\"\r\n * @param color - the color in hex, rgb, or hsl\r\n */\n\nexport var isLight = color => theme => tone(color)(theme) === \"light\";\n/**\r\n * Make a color transparent\r\n * @param color - the color in hex, rgb, or hsl\r\n * @param opacity - the amount of opacity the color should have (0-1)\r\n */\n\nexport var transparentize = (color, opacity) => theme => {\n  var raw = getColor(theme, color);\n  return new TinyColor(raw).setAlpha(opacity).toRgbString();\n};\n/**\r\n * Add white to a color\r\n * @param color - the color in hex, rgb, or hsl\r\n * @param amount - the amount white to add (0-100)\r\n */\n\nexport var whiten = (color, amount) => theme => {\n  var raw = getColor(theme, color);\n  return new TinyColor(raw).mix(\"#fff\", amount).toHexString();\n};\n/**\r\n * Add black to a color\r\n * @param color - the color in hex, rgb, or hsl\r\n * @param amount - the amount black to add (0-100)\r\n */\n\nexport var blacken = (color, amount) => theme => {\n  var raw = getColor(theme, color);\n  return new TinyColor(raw).mix(\"#000\", amount).toHexString();\n};\n/**\r\n * Darken a specified color\r\n * @param color - the color in hex, rgb, or hsl\r\n * @param amount - the amount to darken (0-100)\r\n */\n\nexport var darken = (color, amount) => theme => {\n  var raw = getColor(theme, color);\n  return new TinyColor(raw).darken(amount).toHexString();\n};\n/**\r\n * Lighten a specified color\r\n * @param color - the color in hex, rgb, or hsl\r\n * @param amount - the amount to lighten (0-100)\r\n */\n\nexport var lighten = (color, amount) => theme => new TinyColor(getColor(theme, color)).lighten(amount).toHexString();\n/**\r\n * Checks the contract ratio of between 2 colors,\r\n * based on the Web Content Accessibility Guidelines (Version 2.0).\r\n *\r\n * @param fg - the foreground or text color\r\n * @param bg - the background color\r\n */\n\nexport var contrast = (fg, bg) => theme => readability(getColor(theme, bg), getColor(theme, fg));\n/**\r\n * Checks if a color meets the Web Content Accessibility\r\n * Guidelines (Version 2.0) for constract ratio.\r\n *\r\n * @param fg - the foreground or text color\r\n * @param bg - the background color\r\n */\n\nexport var isAccessible = (textColor, bgColor, options) => theme => isReadable(getColor(theme, bgColor), getColor(theme, textColor), options);\nexport var complementary = color => theme => new TinyColor(getColor(theme, color)).complement().toHexString();\nexport function generateStripe(size, color) {\n  if (size === void 0) {\n    size = \"1rem\";\n  }\n  if (color === void 0) {\n    color = \"rgba(255, 255, 255, 0.15)\";\n  }\n  return {\n    backgroundImage: \"linear-gradient(\\n    45deg,\\n    \" + color + \" 25%,\\n    transparent 25%,\\n    transparent 50%,\\n    \" + color + \" 50%,\\n    \" + color + \" 75%,\\n    transparent 75%,\\n    transparent\\n  )\",\n    backgroundSize: size + \" \" + size\n  };\n}\nexport function randomColor(opts) {\n  var fallback = random().toHexString();\n  if (!opts || isEmptyObject(opts)) {\n    return fallback;\n  }\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors);\n  }\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string);\n  }\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors);\n  }\n  return fallback;\n}\nfunction randomColorFromString(str) {\n  var hash = 0;\n  if (str.length === 0) return hash.toString();\n  for (var i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    hash = hash & hash;\n  }\n  var color = \"#\";\n  for (var j = 0; j < 3; j += 1) {\n    var value = hash >> j * 8 & 255;\n    color += (\"00\" + value.toString(16)).substr(-2);\n  }\n  return color;\n}\nfunction randomColorFromList(str, list) {\n  var index = 0;\n  if (str.length === 0) return list[0];\n  for (var i = 0; i < str.length; i += 1) {\n    index = str.charCodeAt(i) + ((index << 5) - index);\n    index = index & index;\n  }\n  index = (index % list.length + list.length) % list.length;\n  return list[index];\n}\nfunction randomFromList(list) {\n  return list[Math.floor(Math.random() * list.length)];\n}","map":{"version":3,"names":["TinyColor","readability","isReadable","random","memoizedGet","get","isEmptyObject","getColor","theme","color","fallback","hex","isValid","tone","isDark","isLight","transparentize","opacity","raw","setAlpha","toRgbString","whiten","amount","mix","toHexString","blacken","darken","lighten","contrast","fg","bg","isAccessible","textColor","bgColor","options","complementary","complement","generateStripe","size","backgroundImage","backgroundSize","randomColor","opts","string","colors","randomColorFromList","randomColorFromString","randomFromList","str","hash","length","toString","i","charCodeAt","j","value","substr","list","index","Math","floor"],"sources":["C:\\Code Respositories\\hostedwebsite\\node_modules\\@chakra-ui\\theme-tools\\src\\color.ts"],"sourcesContent":["import {\n  TinyColor,\n  readability,\n  isReadable,\n  random,\n  WCAG2Parms,\n} from \"@ctrl/tinycolor\"\nimport { memoizedGet as get, Dict, isEmptyObject } from \"@chakra-ui/utils\"\n\n/**\n * Get the color raw value from theme\n * @param theme - the theme object\n * @param color - the color path (\"green.200\")\n * @param fallback - the fallback color\n */\nexport const getColor = (theme: Dict, color: string, fallback?: string) => {\n  const hex = get(theme, `colors.${color}`, color)\n  const { isValid } = new TinyColor(hex)\n  return isValid ? hex : fallback\n}\n\n/**\n * Determines if the tone of given color is \"light\" or \"dark\"\n * @param color - the color in hex, rgb, or hsl\n */\nexport const tone = (color: string) => (theme: Dict) => {\n  const hex = getColor(theme, color)\n  const isDark = new TinyColor(hex).isDark()\n  return isDark ? \"dark\" : \"light\"\n}\n\n/**\n * Determines if a color tone is \"dark\"\n * @param color - the color in hex, rgb, or hsl\n */\nexport const isDark = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === \"dark\"\n\n/**\n * Determines if a color tone is \"light\"\n * @param color - the color in hex, rgb, or hsl\n */\nexport const isLight = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === \"light\"\n\n/**\n * Make a color transparent\n * @param color - the color in hex, rgb, or hsl\n * @param opacity - the amount of opacity the color should have (0-1)\n */\nexport const transparentize = (color: string, opacity: number) => (\n  theme: Dict,\n) => {\n  const raw = getColor(theme, color)\n  return new TinyColor(raw).setAlpha(opacity).toRgbString()\n}\n\n/**\n * Add white to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount white to add (0-100)\n */\nexport const whiten = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return new TinyColor(raw).mix(\"#fff\", amount).toHexString()\n}\n\n/**\n * Add black to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount black to add (0-100)\n */\nexport const blacken = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return new TinyColor(raw).mix(\"#000\", amount).toHexString()\n}\n\n/**\n * Darken a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to darken (0-100)\n */\nexport const darken = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return new TinyColor(raw).darken(amount).toHexString()\n}\n\n/**\n * Lighten a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to lighten (0-100)\n */\nexport const lighten = (color: string, amount: number) => (theme: Dict) =>\n  new TinyColor(getColor(theme, color)).lighten(amount).toHexString()\n\n/**\n * Checks the contract ratio of between 2 colors,\n * based on the Web Content Accessibility Guidelines (Version 2.0).\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n */\nexport const contrast = (fg: string, bg: string) => (theme: Dict) =>\n  readability(getColor(theme, bg), getColor(theme, fg))\n\n/**\n * Checks if a color meets the Web Content Accessibility\n * Guidelines (Version 2.0) for constract ratio.\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n */\nexport const isAccessible = (\n  textColor: string,\n  bgColor: string,\n  options?: WCAG2Parms,\n) => (theme: Dict) =>\n  isReadable(getColor(theme, bgColor), getColor(theme, textColor), options)\n\nexport const complementary = (color: string) => (theme: Dict) =>\n  new TinyColor(getColor(theme, color)).complement().toHexString()\n\nexport function generateStripe(\n  size = \"1rem\",\n  color = \"rgba(255, 255, 255, 0.15)\",\n) {\n  return {\n    backgroundImage: `linear-gradient(\n    45deg,\n    ${color} 25%,\n    transparent 25%,\n    transparent 50%,\n    ${color} 50%,\n    ${color} 75%,\n    transparent 75%,\n    transparent\n  )`,\n    backgroundSize: `${size} ${size}`,\n  }\n}\n\ninterface RandomColorOptions {\n  /**\n   * If passed, string will be used to generate\n   * random color\n   */\n  string?: string\n  /**\n   * List of colors to pick from at random\n   */\n  colors?: string[]\n}\n\nexport function randomColor(opts?: RandomColorOptions) {\n  const fallback = random().toHexString()\n\n  if (!opts || isEmptyObject(opts)) {\n    return fallback\n  }\n\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors)\n  }\n\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string)\n  }\n\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors)\n  }\n\n  return fallback\n}\n\nfunction randomColorFromString(str: string) {\n  let hash = 0\n  if (str.length === 0) return hash.toString()\n  for (let i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash)\n    hash = hash & hash\n  }\n  let color = \"#\"\n  for (let j = 0; j < 3; j += 1) {\n    const value = (hash >> (j * 8)) & 255\n    color += `00${value.toString(16)}`.substr(-2)\n  }\n  return color\n}\n\nfunction randomColorFromList(str: string, list: string[]) {\n  let index = 0\n  if (str.length === 0) return list[0]\n  for (let i = 0; i < str.length; i += 1) {\n    index = str.charCodeAt(i) + ((index << 5) - index)\n    index = index & index\n  }\n  index = ((index % list.length) + list.length) % list.length\n  return list[index]\n}\n\nfunction randomFromList(list: string[]) {\n  return list[Math.floor(Math.random() * list.length)]\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}