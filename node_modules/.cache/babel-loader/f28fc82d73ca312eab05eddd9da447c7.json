{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles, useTheme } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useRangeSlider } from \"./use-range-slider\";\nvar [RangeSliderProvider, useRangeSliderContext] = createContext({\n  name: \"SliderContext\",\n  errorMessage: \"useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <RangeSlider />\"\n});\nexport { RangeSliderProvider, useRangeSliderContext };\n/**\n * The Slider is used to allow users to make selections from a range of values.\n * It provides context and functionality for all slider components\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#slider\n */\n\nexport var RangeSlider = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Slider\", props);\n  var ownProps = omitThemingProps(props);\n  var {\n    direction\n  } = useTheme();\n  ownProps.direction = direction;\n\n  var _useRangeSlider = useRangeSlider(ownProps),\n      {\n    getRootProps\n  } = _useRangeSlider,\n      context = _objectWithoutPropertiesLoose(_useRangeSlider, [\"getRootProps\"]);\n\n  var ctx = React.useMemo(() => _extends({}, context, {\n    name: props.name\n  }), [context, props.name]);\n  return /*#__PURE__*/React.createElement(RangeSliderProvider, {\n    value: ctx\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({}, getRootProps({}, ref), {\n    className: \"chakra-slider\",\n    __css: styles.container\n  }), props.children)));\n});\nRangeSlider.defaultProps = {\n  orientation: \"horizontal\"\n};\n\nif (__DEV__) {\n  RangeSlider.displayName = \"RangeSlider\";\n}\n/**\n * Slider component that acts as the handle used to select predefined\n * values by dragging its handle along the track\n */\n\n\nexport var RangeSliderThumb = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getThumbProps,\n    getInputProps,\n    name\n  } = useRangeSliderContext();\n  var styles = useStyles();\n  var thumbProps = getThumbProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, thumbProps, {\n    className: cx(\"chakra-slider__thumb\", props.className),\n    __css: styles.thumb\n  }), thumbProps.children, name && /*#__PURE__*/React.createElement(\"input\", getInputProps({\n    index: props.index\n  })));\n});\n\nif (__DEV__) {\n  RangeSliderThumb.displayName = \"RangeSliderThumb\";\n}\n\nexport var RangeSliderTrack = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getTrackProps\n  } = useRangeSliderContext();\n  var styles = useStyles();\n  var trackProps = getTrackProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, trackProps, {\n    className: cx(\"chakra-slider__track\", props.className),\n    __css: styles.track\n  }));\n});\n\nif (__DEV__) {\n  RangeSliderTrack.displayName = \"RangeSliderTrack\";\n}\n\nexport var RangeSliderFilledTrack = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getInnerTrackProps\n  } = useRangeSliderContext();\n  var styles = useStyles();\n  var trackProps = getInnerTrackProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, trackProps, {\n    className: \"chakra-slider__filled-track\",\n    __css: styles.filledTrack\n  }));\n});\n\nif (__DEV__) {\n  RangeSliderFilledTrack.displayName = \"RangeSliderFilledTrack\";\n}\n/**\n * SliderMark is used to provide names for specific Slider\n * values by defining labels or markers along the track.\n *\n * @see Docs https://chakra-ui.com/slider\n */\n\n\nexport var RangeSliderMark = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getMarkerProps\n  } = useRangeSliderContext();\n  var markProps = getMarkerProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, markProps, {\n    className: cx(\"chakra-slider__marker\", props.className)\n  }));\n});\n\nif (__DEV__) {\n  RangeSliderMark.displayName = \"RangeSliderMark\";\n}","map":{"version":3,"sources":["../../src/range-slider.tsx"],"names":["createContext","name","errorMessage","RangeSlider","forwardRef","styles","useMultiStyleConfig","ownProps","omitThemingProps","direction","useTheme","getRootProps","context","useRangeSlider","ctx","props","container","orientation","RangeSliderThumb","useRangeSliderContext","useStyles","thumbProps","getThumbProps","cx","thumb","getInputProps","index","RangeSliderTrack","getTrackProps","trackProps","track","RangeSliderFilledTrack","getInnerTrackProps","filledTrack","RangeSliderMark","getMarkerProps","markProps"],"mappings":"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","sourcesContent":["import { createContext } from \"@chakra-ui/react-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  useRangeSlider,\n  UseRangeSliderProps,\n  UseRangeSliderReturn,\n} from \"./use-range-slider\"\n\ninterface RangeSliderContext\n  extends Omit<UseRangeSliderReturn, \"getRootProps\"> {\n  name?: string | string[]\n}\n\nconst [\n  RangeSliderProvider,\n  useRangeSliderContext,\n] = createContext<RangeSliderContext>({\n  name: \"SliderContext\",\n  errorMessage:\n    \"useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <RangeSlider />\",\n})\n\nexport { RangeSliderProvider, useRangeSliderContext }\n\nexport interface RangeSliderProps\n  extends UseRangeSliderProps,\n    ThemingProps<\"Slider\">,\n    Omit<HTMLChakraProps<\"div\">, keyof UseRangeSliderProps> {}\n\n/**\n * The Slider is used to allow users to make selections from a range of values.\n * It provides context and functionality for all slider components\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#slider\n */\nexport const RangeSlider = forwardRef<RangeSliderProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Slider\", props)\n  const ownProps = omitThemingProps(props)\n  const { direction } = useTheme()\n  ownProps.direction = direction\n\n  const { getRootProps, ...context } = useRangeSlider(ownProps)\n  const ctx = React.useMemo(() => ({ ...context, name: props.name }), [\n    context,\n    props.name,\n  ])\n\n  return (\n    <RangeSliderProvider value={ctx}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          {...getRootProps({}, ref)}\n          className=\"chakra-slider\"\n          __css={styles.container}\n        >\n          {props.children}\n        </chakra.div>\n      </StylesProvider>\n    </RangeSliderProvider>\n  )\n})\n\nRangeSlider.defaultProps = {\n  orientation: \"horizontal\",\n}\n\nif (__DEV__) {\n  RangeSlider.displayName = \"RangeSlider\"\n}\n\nexport interface RangeSliderThumbProps extends HTMLChakraProps<\"div\"> {\n  index: number\n}\n\n/**\n * Slider component that acts as the handle used to select predefined\n * values by dragging its handle along the track\n */\nexport const RangeSliderThumb = forwardRef<RangeSliderThumbProps, \"div\">(\n  (props, ref) => {\n    const { getThumbProps, getInputProps, name } = useRangeSliderContext()\n    const styles = useStyles()\n    const thumbProps = getThumbProps(props, ref)\n\n    return (\n      <chakra.div\n        {...thumbProps}\n        className={cx(\"chakra-slider__thumb\", props.className)}\n        __css={styles.thumb}\n      >\n        {thumbProps.children}\n        {name && <input {...getInputProps({ index: props.index })} />}\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  RangeSliderThumb.displayName = \"RangeSliderThumb\"\n}\n\nexport interface RangeSliderTrackProps extends HTMLChakraProps<\"div\"> {}\n\nexport const RangeSliderTrack = forwardRef<RangeSliderTrackProps, \"div\">(\n  (props, ref) => {\n    const { getTrackProps } = useRangeSliderContext()\n    const styles = useStyles()\n    const trackProps = getTrackProps(props, ref)\n\n    return (\n      <chakra.div\n        {...trackProps}\n        className={cx(\"chakra-slider__track\", props.className)}\n        __css={styles.track}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  RangeSliderTrack.displayName = \"RangeSliderTrack\"\n}\n\nexport interface RangeSliderInnerTrackProps extends HTMLChakraProps<\"div\"> {}\n\nexport const RangeSliderFilledTrack = forwardRef<\n  RangeSliderInnerTrackProps,\n  \"div\"\n>((props, ref) => {\n  const { getInnerTrackProps } = useRangeSliderContext()\n  const styles = useStyles()\n  const trackProps = getInnerTrackProps(props, ref)\n\n  return (\n    <chakra.div\n      {...trackProps}\n      className=\"chakra-slider__filled-track\"\n      __css={styles.filledTrack}\n    />\n  )\n})\n\nif (__DEV__) {\n  RangeSliderFilledTrack.displayName = \"RangeSliderFilledTrack\"\n}\n\nexport interface RangeSliderMarkProps extends HTMLChakraProps<\"div\"> {\n  value: number\n}\n\n/**\n * SliderMark is used to provide names for specific Slider\n * values by defining labels or markers along the track.\n *\n * @see Docs https://chakra-ui.com/slider\n */\nexport const RangeSliderMark = forwardRef<RangeSliderMarkProps, \"div\">(\n  (props, ref) => {\n    const { getMarkerProps } = useRangeSliderContext()\n    const markProps = getMarkerProps(props, ref)\n    return (\n      <chakra.div\n        {...markProps}\n        className={cx(\"chakra-slider__marker\", props.className)}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  RangeSliderMark.displayName = \"RangeSliderMark\"\n}\n"]},"metadata":{},"sourceType":"module"}