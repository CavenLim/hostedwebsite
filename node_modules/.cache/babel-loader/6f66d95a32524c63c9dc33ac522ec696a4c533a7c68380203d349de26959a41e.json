{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { useMergeRefs } from \"@chakra-ui/hooks\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx, dataAttr, mergeWith, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useButtonGroup } from \"./button-group\";\nimport { ButtonSpinner } from \"./button-spinner\";\nimport { ButtonIcon } from \"./button-icon\";\nimport { useButtonType } from \"./use-button-type\";\nexport var Button = /*#__PURE__*/forwardRef((props, ref) => {\n  var group = useButtonGroup();\n  var styles = useStyleConfig(\"Button\", _extends({}, group, props));\n  var _omitThemingProps = omitThemingProps(props),\n    {\n      isDisabled = group == null ? void 0 : group.isDisabled,\n      isLoading,\n      isActive,\n      isFullWidth,\n      children,\n      leftIcon,\n      rightIcon,\n      loadingText,\n      iconSpacing = \"0.5rem\",\n      type,\n      spinner,\n      spinnerPlacement = \"start\",\n      className,\n      as\n    } = _omitThemingProps,\n    rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"isDisabled\", \"isLoading\", \"isActive\", \"isFullWidth\", \"children\", \"leftIcon\", \"rightIcon\", \"loadingText\", \"iconSpacing\", \"type\", \"spinner\", \"spinnerPlacement\", \"className\", \"as\"]);\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n\n  var buttonStyles = React.useMemo(() => {\n    var _styles$_focus;\n    var _focus = mergeWith({}, (_styles$_focus = styles == null ? void 0 : styles[\"_focus\"]) != null ? _styles$_focus : {}, {\n      zIndex: 1\n    });\n    return _extends({\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      width: isFullWidth ? \"100%\" : \"auto\"\n    }, styles, !!group && {\n      _focus\n    });\n  }, [styles, group, isFullWidth]);\n  var {\n    ref: _ref,\n    type: defaultType\n  } = useButtonType(as);\n  var contentProps = {\n    rightIcon,\n    leftIcon,\n    iconSpacing,\n    children\n  };\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({\n    disabled: isDisabled || isLoading,\n    ref: useMergeRefs(ref, _ref),\n    as: as,\n    type: type != null ? type : defaultType,\n    \"data-active\": dataAttr(isActive),\n    \"data-loading\": dataAttr(isLoading),\n    __css: buttonStyles,\n    className: cx(\"chakra-button\", className)\n  }, rest), isLoading && spinnerPlacement === \"start\" && /*#__PURE__*/React.createElement(ButtonSpinner, {\n    className: \"chakra-button__spinner--start\",\n    label: loadingText,\n    placement: \"start\"\n  }, spinner), isLoading ? loadingText || /*#__PURE__*/React.createElement(chakra.span, {\n    opacity: 0\n  }, /*#__PURE__*/React.createElement(ButtonContent, contentProps)) : /*#__PURE__*/React.createElement(ButtonContent, contentProps), isLoading && spinnerPlacement === \"end\" && /*#__PURE__*/React.createElement(ButtonSpinner, {\n    className: \"chakra-button__spinner--end\",\n    label: loadingText,\n    placement: \"end\"\n  }, spinner));\n});\nif (__DEV__) {\n  Button.displayName = \"Button\";\n}\nfunction ButtonContent(props) {\n  var {\n    leftIcon,\n    rightIcon,\n    children,\n    iconSpacing\n  } = props;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, leftIcon && /*#__PURE__*/React.createElement(ButtonIcon, {\n    marginEnd: iconSpacing\n  }, leftIcon), children, rightIcon && /*#__PURE__*/React.createElement(ButtonIcon, {\n    marginStart: iconSpacing\n  }, rightIcon));\n}","map":{"version":3,"names":["useMergeRefs","chakra","forwardRef","omitThemingProps","useStyleConfig","cx","dataAttr","mergeWith","__DEV__","React","useButtonGroup","ButtonSpinner","ButtonIcon","useButtonType","Button","props","ref","group","styles","_extends","_omitThemingProps","isDisabled","isLoading","isActive","isFullWidth","children","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","spinnerPlacement","className","as","rest","_objectWithoutPropertiesLoose","buttonStyles","useMemo","_styles$_focus","_focus","zIndex","display","appearance","alignItems","justifyContent","userSelect","position","whiteSpace","verticalAlign","outline","width","_ref","defaultType","contentProps","createElement","button","disabled","__css","label","placement","span","opacity","ButtonContent","displayName","Fragment","marginEnd","marginStart"],"sources":["/Users/cavenlim/CavenLim site backup/node_modules/@chakra-ui/button/src/button.tsx"],"sourcesContent":["import { useMergeRefs } from \"@chakra-ui/hooks\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useButtonGroup } from \"./button-group\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonOptions {\n  /**\n   * If `true`, the button will show a spinner.\n   */\n  isLoading?: boolean\n  /**\n   * If `true`, the button will be styled in its active state.\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the button will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * The label to show in the button when `isLoading` is true\n   * If no text is passed, it only shows the spinner\n   */\n  loadingText?: string\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  isFullWidth?: boolean\n  /**\n   * The html button type to use.\n   */\n  type?: \"button\" | \"reset\" | \"submit\"\n  /**\n   * If added, the button will show an icon before the button's label.\n   * @type React.ReactElement\n   */\n  leftIcon?: React.ReactElement\n  /**\n   * If added, the button will show an icon after the button's label.\n   * @type React.ReactElement\n   */\n  rightIcon?: React.ReactElement\n  /**\n   * The space between the button icon and label.\n   * @type SystemProps[\"marginRight\"]\n   */\n  iconSpacing?: SystemProps[\"marginRight\"]\n  /**\n   * Replace the spinner component when `isLoading` is set to `true`\n   * @type React.ReactElement\n   */\n  spinner?: React.ReactElement\n  /**\n   * It determines the placement of the spinner when isLoading is true\n   * @default \"start\"\n   */\n  spinnerPlacement?: \"start\" | \"end\"\n}\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    isFullWidth,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = React.useMemo(() => {\n    const _focus = mergeWith({}, styles?.[\"_focus\"] ?? {}, { zIndex: 1 })\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      width: isFullWidth ? \"100%\" : \"auto\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group, isFullWidth])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      disabled={isDisabled || isLoading}\n      ref={useMergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nif (__DEV__) {\n  Button.displayName = \"Button\"\n}\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}