{"ast":null,"code":"var _jsxFileName = \"/Users/cavenlim/CavenLim site backup/src/Components/VoxelDog.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Box, Spinner } from \"@chakra-ui/react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { loadGLTFModel } from \"./Model\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction easeOutCirc(x) {\n  return Math.sqrt(1 - Math.pow(x - 1, 4));\n}\n\nconst VoxelDog = () => {\n  _s();\n\n  const refContainer = useRef();\n  const [loading, setLoading] = useState(true);\n  const [renderer, setRenderer] = useState();\n  const [camera, setCamera] = useState();\n  const [target] = useState(new THREE.Vector3(-0.5, 1.2, 0));\n  const [initialCameraPosition] = useState(new THREE.Vector3(20 * Math.sin(0.2 * Math.PI), 10, 20 * Math.cos(0.2 * Math.PI)));\n  const [scene] = useState(new THREE.Scene());\n  const [_controls, setControls] = useState();\n  useEffect(() => {});\n  return /*#__PURE__*/_jsxDEV(Box, {\n    ref: refContainer,\n    className: \"voxel-dog\",\n    m: \"auto\",\n    at: ['-20px', '-60px', '-120px'],\n    mb: ['-40px', '-140px', '-200px'],\n    w: [280, 480, 640],\n    h: [280, 480, 640],\n    position: \"relative\",\n    children: [loading && /*#__PURE__*/_jsxDEV(Spinner, {\n      size: \"xl\",\n      position: \"absolute\",\n      left: \"50%\",\n      top: \"50%\",\n      ml: \"calc(0px - var(-spinner-size) / 2) \",\n      mt: \"calc(0px - var(--spinner-size))\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this), \"Dog!!\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(VoxelDog, \"DRNLGWEV+aZrQnYqoMasvAoXg0g=\");\n\n_c = VoxelDog;\nexport default VoxelDog;\n\nvar _c;\n\n$RefreshReg$(_c, \"VoxelDog\");","map":{"version":3,"sources":["/Users/cavenlim/CavenLim site backup/src/Components/VoxelDog.js"],"names":["useState","useEffect","useRef","useCallback","Box","Spinner","THREE","OrbitControls","loadGLTFModel","easeOutCirc","x","Math","sqrt","pow","VoxelDog","refContainer","loading","setLoading","renderer","setRenderer","camera","setCamera","target","Vector3","initialCameraPosition","sin","PI","cos","scene","Scene","_controls","setControls"],"mappings":";;;AAAA,SAASA,QAAT,EAAkBC,SAAlB,EAA4BC,MAA5B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,GAAT,EAAaC,OAAb,QAA4B,kBAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAAQC,aAAR,QAA2B,2CAA3B;AACA,SAASC,aAAT,QAA8B,SAA9B;;;AAEA,SAASC,WAAT,CAAqBC,CAArB,EAAuB;AACnB,SAAOC,IAAI,CAACC,IAAL,CAAU,IAAED,IAAI,CAACE,GAAL,CAASH,CAAC,GAAC,CAAX,EAAa,CAAb,CAAZ,CAAP;AACH;;AAED,MAAMI,QAAQ,GAAG,MAAM;AAAA;;AACnB,QAAMC,YAAY,GAAGb,MAAM,EAA3B;AACA,QAAM,CAACc,OAAD,EAASC,UAAT,IAAqBjB,QAAQ,CAAC,IAAD,CAAnC;AACA,QAAM,CAACkB,QAAD,EAAUC,WAAV,IAAyBnB,QAAQ,EAAvC;AACA,QAAM,CAACoB,MAAD,EAAQC,SAAR,IAAqBrB,QAAQ,EAAnC;AACA,QAAM,CAACsB,MAAD,IAAWtB,QAAQ,CAAC,IAAIM,KAAK,CAACiB,OAAV,CAAkB,CAAC,GAAnB,EAAuB,GAAvB,EAA2B,CAA3B,CAAD,CAAzB;AACA,QAAM,CAACC,qBAAD,IAA0BxB,QAAQ,CACpC,IAAIM,KAAK,CAACiB,OAAV,CAAkB,KAAKZ,IAAI,CAACc,GAAL,CAAS,MAAId,IAAI,CAACe,EAAlB,CAAvB,EACA,EADA,EAEA,KAAGf,IAAI,CAACgB,GAAL,CAAS,MAAIhB,IAAI,CAACe,EAAlB,CAFH,CADoC,CAAxC;AAMA,QAAM,CAACE,KAAD,IAAU5B,QAAQ,CAAC,IAAIM,KAAK,CAACuB,KAAV,EAAD,CAAxB;AACA,QAAM,CAACC,SAAD,EAAWC,WAAX,IAA0B/B,QAAQ,EAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAK,CAEd,CAFQ,CAAT;AAIA,sBACI,QAAC,GAAD;AAAK,IAAA,GAAG,EAAEc,YAAV;AAAwB,IAAA,SAAS,EAAC,WAAlC;AAA8C,IAAA,CAAC,EAAC,MAAhD;AACA,IAAA,EAAE,EAAE,CAAC,OAAD,EAAS,OAAT,EAAiB,QAAjB,CADJ;AAEA,IAAA,EAAE,EAAE,CAAC,OAAD,EAAS,QAAT,EAAkB,QAAlB,CAFJ;AAGA,IAAA,CAAC,EAAE,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAHH;AAIA,IAAA,CAAC,EAAE,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAJH;AAKA,IAAA,QAAQ,EAAC,UALT;AAAA,eAOKC,OAAO,iBACJ,QAAC,OAAD;AAAS,MAAA,IAAI,EAAC,IAAd;AAAmB,MAAA,QAAQ,EAAC,UAA5B;AAAuC,MAAA,IAAI,EAAE,KAA7C;AAAmD,MAAA,GAAG,EAAE,KAAxD;AAA8D,MAAA,EAAE,EAAC,qCAAjE;AACA,MAAA,EAAE,EAAC;AADH;AAAA;AAAA;AAAA;AAAA,YARR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH,CAlCD;;GAAMF,Q;;KAAAA,Q;AAmCN,eAAeA,QAAf","sourcesContent":["import { useState,useEffect,useRef,useCallback } from \"react\";\nimport { Box,Spinner } from \"@chakra-ui/react\";\nimport * as THREE from \"three\";\nimport {OrbitControls} from'three/examples/jsm/controls/OrbitControls';\nimport { loadGLTFModel } from \"./Model\";\n\nfunction easeOutCirc(x){\n    return Math.sqrt(1-Math.pow(x-1,4))\n}\n\nconst VoxelDog = () => {\n    const refContainer = useRef()\n    const [loading,setLoading]=useState(true)\n    const [renderer,setRenderer] = useState()\n    const [camera,setCamera] = useState()\n    const [target] = useState(new THREE.Vector3(-0.5,1.2,0))\n    const [initialCameraPosition] = useState(\n        new THREE.Vector3(20 * Math.sin(0.2*Math.PI),\n        10,\n        20*Math.cos(0.2*Math.PI)\n        )\n    )\n    const [scene] = useState(new THREE.Scene())\n    const [_controls,setControls] = useState()\n\n    useEffect(() =>{\n\n    })\n\n    return(\n        <Box ref={refContainer} className='voxel-dog' m=\"auto\" \n        at={['-20px','-60px','-120px']}\n        mb={['-40px','-140px','-200px']}\n        w={[280,480,640]}\n        h={[280,480,640]}\n        position=\"relative\"\n        >\n            {loading &&(\n                <Spinner size=\"xl\" position=\"absolute\" left =\"50%\" top =\"50%\" ml=\"calc(0px - var(-spinner-size) / 2) \" \n                mt=\"calc(0px - var(--spinner-size))\" />\n            )}\n            Dog!!\n        </Box>\n    )\n}\nexport default VoxelDog;"]},"metadata":{},"sourceType":"module"}