{"ast":null,"code":"import _slicedToArray from \"/Users/cavenlim/CavenLim site backup/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles, useTheme } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useSlider } from \"./use-slider\";\n\nvar _createContext = createContext({\n  name: \"SliderContext\",\n  errorMessage: \"useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <Slider />\"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    SliderProvider = _createContext2[0],\n    useSliderContext = _createContext2[1];\n\nexport { SliderProvider, useSliderContext };\n/**\n * The Slider is used to allow users to make selections from a range of values.\n * It provides context and functionality for all slider components\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#slider\n */\n\nexport var Slider = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Slider\", props);\n  var ownProps = omitThemingProps(props);\n\n  var _useTheme = useTheme(),\n      direction = _useTheme.direction;\n\n  ownProps.direction = direction;\n\n  var _useSlider = useSlider(ownProps),\n      getInputProps = _useSlider.getInputProps,\n      getRootProps = _useSlider.getRootProps,\n      context = _objectWithoutPropertiesLoose(_useSlider, [\"getInputProps\", \"getRootProps\"]);\n\n  var rootProps = getRootProps();\n  var inputProps = getInputProps({}, ref);\n  return /*#__PURE__*/React.createElement(SliderProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({}, rootProps, {\n    className: \"chakra-slider\",\n    __css: styles.container\n  }), props.children, /*#__PURE__*/React.createElement(\"input\", inputProps))));\n});\nSlider.defaultProps = {\n  orientation: \"horizontal\"\n};\n\nif (__DEV__) {\n  Slider.displayName = \"Slider\";\n}\n/**\n * Slider component that acts as the handle used to select predefined\n * values by dragging its handle along the track\n */\n\n\nexport var SliderThumb = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _useSliderContext = useSliderContext(),\n      getThumbProps = _useSliderContext.getThumbProps;\n\n  var styles = useStyles();\n  var thumbProps = getThumbProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, thumbProps, {\n    className: cx(\"chakra-slider__thumb\", props.className),\n    __css: styles.thumb\n  }));\n});\n\nif (__DEV__) {\n  SliderThumb.displayName = \"SliderThumb\";\n}\n\nexport var SliderTrack = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _useSliderContext2 = useSliderContext(),\n      getTrackProps = _useSliderContext2.getTrackProps;\n\n  var styles = useStyles();\n  var trackProps = getTrackProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, trackProps, {\n    className: cx(\"chakra-slider__track\", props.className),\n    __css: styles.track\n  }));\n});\n\nif (__DEV__) {\n  SliderTrack.displayName = \"SliderTrack\";\n}\n\nexport var SliderFilledTrack = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _useSliderContext3 = useSliderContext(),\n      getInnerTrackProps = _useSliderContext3.getInnerTrackProps;\n\n  var styles = useStyles();\n  var trackProps = getInnerTrackProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, trackProps, {\n    className: \"chakra-slider__filled-track\",\n    __css: styles.filledTrack\n  }));\n});\n\nif (__DEV__) {\n  SliderFilledTrack.displayName = \"SliderFilledTrack\";\n}\n/**\n * SliderMark is used to provide names for specific Slider\n * values by defining labels or markers along the track.\n *\n * @see Docs https://chakra-ui.com/slider\n */\n\n\nexport var SliderMark = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _useSliderContext4 = useSliderContext(),\n      getMarkerProps = _useSliderContext4.getMarkerProps;\n\n  var markProps = getMarkerProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, markProps, {\n    className: cx(\"chakra-slider__marker\", props.className)\n  }));\n});\n\nif (__DEV__) {\n  SliderMark.displayName = \"SliderMark\";\n}","map":{"version":3,"sources":["../../src/slider.tsx"],"names":["createContext","name","errorMessage","Slider","forwardRef","styles","useMultiStyleConfig","ownProps","omitThemingProps","direction","useTheme","getRootProps","useSlider","rootProps","inputProps","getInputProps","context","container","props","orientation","SliderThumb","getThumbProps","useSliderContext","useStyles","thumbProps","cx","thumb","SliderTrack","getTrackProps","trackProps","track","SliderFilledTrack","getInnerTrackProps","filledTrack","SliderMark","getMarkerProps","markProps"],"mappings":"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","sourcesContent":["import { createContext } from \"@chakra-ui/react-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useSlider, UseSliderProps, UseSliderReturn } from \"./use-slider\"\n\ninterface SliderContext\n  extends Omit<UseSliderReturn, \"getInputProps\" | \"getRootProps\"> {}\n\nconst [SliderProvider, useSliderContext] = createContext<SliderContext>({\n  name: \"SliderContext\",\n  errorMessage:\n    \"useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <Slider />\",\n})\n\nexport { SliderProvider, useSliderContext }\n\nexport interface SliderProps\n  extends UseSliderProps,\n    ThemingProps<\"Slider\">,\n    Omit<HTMLChakraProps<\"div\">, keyof UseSliderProps> {}\n\n/**\n * The Slider is used to allow users to make selections from a range of values.\n * It provides context and functionality for all slider components\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#slider\n */\nexport const Slider = forwardRef<SliderProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Slider\", props)\n  const ownProps = omitThemingProps(props)\n  const { direction } = useTheme()\n  ownProps.direction = direction\n\n  const { getInputProps, getRootProps, ...context } = useSlider(ownProps)\n\n  const rootProps = getRootProps()\n  const inputProps = getInputProps({}, ref)\n\n  return (\n    <SliderProvider value={context}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          {...rootProps}\n          className=\"chakra-slider\"\n          __css={styles.container}\n        >\n          {props.children}\n          <input {...inputProps} />\n        </chakra.div>\n      </StylesProvider>\n    </SliderProvider>\n  )\n})\n\nSlider.defaultProps = {\n  orientation: \"horizontal\",\n}\n\nif (__DEV__) {\n  Slider.displayName = \"Slider\"\n}\n\nexport interface SliderThumbProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Slider component that acts as the handle used to select predefined\n * values by dragging its handle along the track\n */\nexport const SliderThumb = forwardRef<SliderThumbProps, \"div\">((props, ref) => {\n  const { getThumbProps } = useSliderContext()\n  const styles = useStyles()\n  const thumbProps = getThumbProps(props, ref)\n\n  return (\n    <chakra.div\n      {...thumbProps}\n      className={cx(\"chakra-slider__thumb\", props.className)}\n      __css={styles.thumb}\n    />\n  )\n})\n\nif (__DEV__) {\n  SliderThumb.displayName = \"SliderThumb\"\n}\n\nexport interface SliderTrackProps extends HTMLChakraProps<\"div\"> {}\n\nexport const SliderTrack = forwardRef<SliderTrackProps, \"div\">((props, ref) => {\n  const { getTrackProps } = useSliderContext()\n  const styles = useStyles()\n  const trackProps = getTrackProps(props, ref)\n\n  return (\n    <chakra.div\n      {...trackProps}\n      className={cx(\"chakra-slider__track\", props.className)}\n      __css={styles.track}\n    />\n  )\n})\n\nif (__DEV__) {\n  SliderTrack.displayName = \"SliderTrack\"\n}\n\nexport interface SliderInnerTrackProps extends HTMLChakraProps<\"div\"> {}\n\nexport const SliderFilledTrack = forwardRef<SliderInnerTrackProps, \"div\">(\n  (props, ref) => {\n    const { getInnerTrackProps } = useSliderContext()\n    const styles = useStyles()\n    const trackProps = getInnerTrackProps(props, ref)\n\n    return (\n      <chakra.div\n        {...trackProps}\n        className=\"chakra-slider__filled-track\"\n        __css={styles.filledTrack}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  SliderFilledTrack.displayName = \"SliderFilledTrack\"\n}\n\nexport interface SliderMarkProps extends HTMLChakraProps<\"div\"> {\n  value: number\n}\n\n/**\n * SliderMark is used to provide names for specific Slider\n * values by defining labels or markers along the track.\n *\n * @see Docs https://chakra-ui.com/slider\n */\nexport const SliderMark = forwardRef<SliderMarkProps, \"div\">((props, ref) => {\n  const { getMarkerProps } = useSliderContext()\n  const markProps = getMarkerProps(props, ref)\n  return (\n    <chakra.div\n      {...markProps}\n      className={cx(\"chakra-slider__marker\", props.className)}\n    />\n  )\n})\n\nif (__DEV__) {\n  SliderMark.displayName = \"SliderMark\"\n}\n"]},"metadata":{},"sourceType":"module"}