{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * This is a modified version of `PanSession` from `framer-motion`.\n *\n * Credit goes to `framer-motion` of this useful utilities.\n * License can be found here: https://github.com/framer/motion\n */\nimport sync, { cancelSync, getFrameData } from \"framesync\";\nimport { getEventWindow } from \"./dom\";\nimport { distance, noop, pipe } from \"./function\";\nimport { addPointerEvent, extractEventInfo, isMouseEvent, isMultiTouchEvent } from \"./pointer-event\";\n/**\n * The event information passed to pan event handlers like `onPan`, `onPanStart`.\n *\n * It contains information about the current state of the tap gesture such as its\n * `point`, `delta`, and `offset`\n */\n\n/**\n * @internal\n *\n * A Pan Session is recognized when the pointer is down\n * and moved in the allowed direction.\n */\nexport class PanSession {\n  /**\n   * We use this to keep track of the `x` and `y` pan session history\n   * as the pan event happens. It helps to calculate the `offset` and `delta`\n   */\n  // The pointer event that started the pan session\n  // The current pointer event for the pan session\n  // The current pointer event info for the pan session\n\n  /**\n   * Minimal pan distance required before recognizing the pan.\n   * @default \"3px\"\n   */\n  constructor(_event, handlers, threshold) {\n    _defineProperty(this, \"history\", []);\n    _defineProperty(this, \"startEvent\", null);\n    _defineProperty(this, \"lastEvent\", null);\n    _defineProperty(this, \"lastEventInfo\", null);\n    _defineProperty(this, \"handlers\", {});\n    _defineProperty(this, \"removeListeners\", noop);\n    _defineProperty(this, \"threshold\", 3);\n    _defineProperty(this, \"win\", void 0);\n    _defineProperty(this, \"updatePoint\", () => {\n      if (!(this.lastEvent && this.lastEventInfo)) return;\n      var info = getPanInfo(this.lastEventInfo, this.history);\n      var isPanStarted = this.startEvent !== null;\n      var isDistancePastThreshold = distance(info.offset, {\n        x: 0,\n        y: 0\n      }) >= this.threshold;\n      if (!isPanStarted && !isDistancePastThreshold) return;\n      var {\n        timestamp\n      } = getFrameData();\n      this.history.push(_extends({}, info.point, {\n        timestamp\n      }));\n      var {\n        onStart,\n        onMove\n      } = this.handlers;\n      if (!isPanStarted) {\n        onStart == null ? void 0 : onStart(this.lastEvent, info);\n        this.startEvent = this.lastEvent;\n      }\n      onMove == null ? void 0 : onMove(this.lastEvent, info);\n    });\n    _defineProperty(this, \"onPointerMove\", (event, info) => {\n      this.lastEvent = event;\n      this.lastEventInfo = info; // Because Safari doesn't trigger mouseup events when it's above a `<select>`\n\n      if (isMouseEvent(event) && event.buttons === 0) {\n        this.onPointerUp(event, info);\n        return;\n      } // Throttle mouse move event to once per frame\n\n      sync.update(this.updatePoint, true);\n    });\n    _defineProperty(this, \"onPointerUp\", (event, info) => {\n      // notify pan session ended\n      var panInfo = getPanInfo(info, this.history);\n      var {\n        onEnd,\n        onSessionEnd\n      } = this.handlers;\n      onSessionEnd == null ? void 0 : onSessionEnd(event, panInfo);\n      this.end(); // if panning never started, no need to call `onEnd`\n      // panning requires a pointermove of at least 3px\n\n      if (!onEnd || !this.startEvent) return;\n      onEnd == null ? void 0 : onEnd(event, panInfo);\n    });\n    this.win = getEventWindow(_event); // If we have more than one touch, don't start detecting this gesture\n\n    if (isMultiTouchEvent(_event)) return;\n    this.handlers = handlers;\n    if (threshold) {\n      this.threshold = threshold;\n    } // stop default browser behavior\n\n    _event.stopPropagation();\n    _event.preventDefault(); // get and save the `pointerdown` event info in history\n    // we'll use it to compute the `offset`\n\n    var _info = extractEventInfo(_event);\n    var {\n      timestamp: _timestamp\n    } = getFrameData();\n    this.history = [_extends({}, _info.point, {\n      timestamp: _timestamp\n    })]; // notify pan session start\n\n    var {\n      onSessionStart\n    } = handlers;\n    onSessionStart == null ? void 0 : onSessionStart(_event, getPanInfo(_info, this.history)); // attach event listeners and return a single function to remove them all\n\n    this.removeListeners = pipe(addPointerEvent(this.win, \"pointermove\", this.onPointerMove), addPointerEvent(this.win, \"pointerup\", this.onPointerUp), addPointerEvent(this.win, \"pointercancel\", this.onPointerUp));\n  }\n  updateHandlers(handlers) {\n    this.handlers = handlers;\n  }\n  end() {\n    var _this$removeListeners;\n    (_this$removeListeners = this.removeListeners) == null ? void 0 : _this$removeListeners.call(this);\n    cancelSync.update(this.updatePoint);\n  }\n}\nfunction subtractPoint(a, b) {\n  return {\n    x: a.x - b.x,\n    y: a.y - b.y\n  };\n}\nfunction startPanPoint(history) {\n  return history[0];\n}\nfunction lastPanPoint(history) {\n  return history[history.length - 1];\n}\nfunction getPanInfo(info, history) {\n  return {\n    point: info.point,\n    delta: subtractPoint(info.point, lastPanPoint(history)),\n    offset: subtractPoint(info.point, startPanPoint(history)),\n    velocity: getVelocity(history, 0.1)\n  };\n}\nfunction lastDevicePoint(history) {\n  return history[history.length - 1];\n}\nvar toMilliseconds = seconds => seconds * 1000;\nfunction getVelocity(history, timeDelta) {\n  if (history.length < 2) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  var i = history.length - 1;\n  var timestampedPoint = null;\n  var lastPoint = lastDevicePoint(history);\n  while (i >= 0) {\n    timestampedPoint = history[i];\n    if (lastPoint.timestamp - timestampedPoint.timestamp > toMilliseconds(timeDelta)) {\n      break;\n    }\n    i--;\n  }\n  if (!timestampedPoint) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  var time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1000;\n  if (time === 0) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  var currentVelocity = {\n    x: (lastPoint.x - timestampedPoint.x) / time,\n    y: (lastPoint.y - timestampedPoint.y) / time\n  };\n  if (currentVelocity.x === Infinity) {\n    currentVelocity.x = 0;\n  }\n  if (currentVelocity.y === Infinity) {\n    currentVelocity.y = 0;\n  }\n  return currentVelocity;\n}","map":{"version":3,"names":["sync","cancelSync","getFrameData","getEventWindow","distance","noop","pipe","addPointerEvent","extractEventInfo","isMouseEvent","isMultiTouchEvent","PanSession","constructor","_event","handlers","threshold","_defineProperty","lastEvent","lastEventInfo","info","getPanInfo","history","isPanStarted","startEvent","isDistancePastThreshold","offset","x","y","timestamp","push","_extends","point","onStart","onMove","event","buttons","onPointerUp","update","updatePoint","panInfo","onEnd","onSessionEnd","end","win","stopPropagation","preventDefault","_info","_timestamp","onSessionStart","removeListeners","onPointerMove","updateHandlers","_this$removeListeners","call","subtractPoint","a","b","startPanPoint","lastPanPoint","length","delta","velocity","getVelocity","lastDevicePoint","toMilliseconds","seconds","timeDelta","i","timestampedPoint","lastPoint","time","currentVelocity","Infinity"],"sources":["/Users/cavenlim/CavenLim site backup/node_modules/@chakra-ui/utils/src/pan-event.ts"],"sourcesContent":["/**\n * This is a modified version of `PanSession` from `framer-motion`.\n *\n * Credit goes to `framer-motion` of this useful utilities.\n * License can be found here: https://github.com/framer/motion\n */\n\nimport sync, { cancelSync, getFrameData } from \"framesync\"\nimport { getEventWindow } from \"./dom\"\nimport { distance, noop, pipe } from \"./function\"\nimport {\n  addPointerEvent,\n  AnyPointerEvent,\n  extractEventInfo,\n  isMouseEvent,\n  isMultiTouchEvent,\n  Point,\n  PointerEventInfo,\n} from \"./pointer-event\"\n\n/**\n * The event information passed to pan event handlers like `onPan`, `onPanStart`.\n *\n * It contains information about the current state of the tap gesture such as its\n * `point`, `delta`, and `offset`\n */\nexport interface PanEventInfo {\n  /**\n   * Contains `x` and `y` values for the current pan position relative\n   * to the device or page.\n   */\n  point: Point\n  /**\n   * Contains `x` and `y` values for the distance moved since\n   * the last pan event.\n   */\n  delta: Point\n  /**\n   * Contains `x` and `y` values for the distance moved from\n   * the first pan event.\n   */\n  offset: Point\n  /**\n   * Contains `x` and `y` values for the current velocity of the pointer.\n   */\n  velocity: Point\n}\n\nexport type PanEventHandler = (\n  event: AnyPointerEvent,\n  info: PanEventInfo,\n) => void\n\ninterface TimestampedPoint extends Point {\n  timestamp: number\n}\n\nexport interface PanSessionHandlers {\n  /**\n   * Callback fired when the pan session is created.\n   * This is typically called once `pointerdown` event is fired.\n   */\n  onSessionStart: PanEventHandler\n  /**\n   * Callback fired when the pan session is detached.\n   * This is typically called once `pointerup` event is fired.\n   */\n  onSessionEnd: PanEventHandler\n  /**\n   * Callback fired when the pan session has started.\n   * The pan session when the pan offset is greater than\n   * the threshold (allowable move distance to detect pan)\n   */\n  onStart: PanEventHandler\n  /**\n   * Callback fired while panning\n   */\n  onMove: PanEventHandler\n  /**\n   * Callback fired when the current pan session has end.\n   * This is typically called once `pointerup` event is fired.\n   */\n  onEnd: PanEventHandler\n}\n\ntype PanSessionHistory = TimestampedPoint[]\n\nexport type PanSessionOptions = {\n  threshold?: number\n  window?: Window\n}\n\n/**\n * @internal\n *\n * A Pan Session is recognized when the pointer is down\n * and moved in the allowed direction.\n */\nexport class PanSession {\n  /**\n   * We use this to keep track of the `x` and `y` pan session history\n   * as the pan event happens. It helps to calculate the `offset` and `delta`\n   */\n  private history: PanSessionHistory = []\n\n  // The pointer event that started the pan session\n  private startEvent: AnyPointerEvent | null = null\n\n  // The current pointer event for the pan session\n  private lastEvent: AnyPointerEvent | null = null\n\n  // The current pointer event info for the pan session\n  private lastEventInfo: PointerEventInfo | null = null\n\n  private handlers: Partial<PanSessionHandlers> = {}\n\n  private removeListeners: Function = noop\n\n  /**\n   * Minimal pan distance required before recognizing the pan.\n   * @default \"3px\"\n   */\n  private threshold = 3\n\n  private win: typeof globalThis\n\n  constructor(\n    event: AnyPointerEvent,\n    handlers: Partial<PanSessionHandlers>,\n    threshold?: number,\n  ) {\n    this.win = getEventWindow(event)\n\n    // If we have more than one touch, don't start detecting this gesture\n    if (isMultiTouchEvent(event)) return\n\n    this.handlers = handlers\n\n    if (threshold) {\n      this.threshold = threshold\n    }\n\n    // stop default browser behavior\n    event.stopPropagation()\n    event.preventDefault()\n\n    // get and save the `pointerdown` event info in history\n    // we'll use it to compute the `offset`\n    const info = extractEventInfo(event)\n    const { timestamp } = getFrameData()\n    this.history = [{ ...info.point, timestamp }]\n\n    // notify pan session start\n    const { onSessionStart } = handlers\n    onSessionStart?.(event, getPanInfo(info, this.history))\n\n    // attach event listeners and return a single function to remove them all\n    this.removeListeners = pipe(\n      addPointerEvent(this.win, \"pointermove\", this.onPointerMove),\n      addPointerEvent(this.win, \"pointerup\", this.onPointerUp),\n      addPointerEvent(this.win, \"pointercancel\", this.onPointerUp),\n    )\n  }\n\n  private updatePoint = () => {\n    if (!(this.lastEvent && this.lastEventInfo)) return\n\n    const info = getPanInfo(this.lastEventInfo, this.history)\n\n    const isPanStarted = this.startEvent !== null\n\n    const isDistancePastThreshold =\n      distance(info.offset, { x: 0, y: 0 }) >= this.threshold\n\n    if (!isPanStarted && !isDistancePastThreshold) return\n\n    const { timestamp } = getFrameData()\n    this.history.push({ ...info.point, timestamp })\n\n    const { onStart, onMove } = this.handlers\n\n    if (!isPanStarted) {\n      onStart?.(this.lastEvent, info)\n      this.startEvent = this.lastEvent\n    }\n\n    onMove?.(this.lastEvent, info)\n  }\n\n  private onPointerMove = (event: AnyPointerEvent, info: PointerEventInfo) => {\n    this.lastEvent = event\n    this.lastEventInfo = info\n\n    // Because Safari doesn't trigger mouseup events when it's above a `<select>`\n    if (isMouseEvent(event) && event.buttons === 0) {\n      this.onPointerUp(event, info)\n      return\n    }\n\n    // Throttle mouse move event to once per frame\n    sync.update(this.updatePoint, true)\n  }\n\n  private onPointerUp = (event: AnyPointerEvent, info: PointerEventInfo) => {\n    // notify pan session ended\n    const panInfo = getPanInfo(info, this.history)\n    const { onEnd, onSessionEnd } = this.handlers\n\n    onSessionEnd?.(event, panInfo)\n    this.end()\n\n    // if panning never started, no need to call `onEnd`\n    // panning requires a pointermove of at least 3px\n    if (!onEnd || !this.startEvent) return\n\n    onEnd?.(event, panInfo)\n  }\n\n  updateHandlers(handlers: Partial<PanSessionHandlers>) {\n    this.handlers = handlers\n  }\n\n  end() {\n    this.removeListeners?.()\n    cancelSync.update(this.updatePoint)\n  }\n}\n\nfunction subtractPoint(a: Point, b: Point) {\n  return { x: a.x - b.x, y: a.y - b.y }\n}\n\nfunction startPanPoint(history: PanSessionHistory) {\n  return history[0]\n}\n\nfunction lastPanPoint(history: PanSessionHistory) {\n  return history[history.length - 1]\n}\n\nfunction getPanInfo(info: PointerEventInfo, history: PanSessionHistory) {\n  return {\n    point: info.point,\n    delta: subtractPoint(info.point, lastPanPoint(history)),\n    offset: subtractPoint(info.point, startPanPoint(history)),\n    velocity: getVelocity(history, 0.1),\n  }\n}\n\nfunction lastDevicePoint(history: TimestampedPoint[]): TimestampedPoint {\n  return history[history.length - 1]\n}\n\nconst toMilliseconds = (seconds: number) => seconds * 1000\n\nfunction getVelocity(history: TimestampedPoint[], timeDelta: number): Point {\n  if (history.length < 2) {\n    return { x: 0, y: 0 }\n  }\n\n  let i = history.length - 1\n  let timestampedPoint: TimestampedPoint | null = null\n  const lastPoint = lastDevicePoint(history)\n  while (i >= 0) {\n    timestampedPoint = history[i]\n    if (\n      lastPoint.timestamp - timestampedPoint.timestamp >\n      toMilliseconds(timeDelta)\n    ) {\n      break\n    }\n    i--\n  }\n\n  if (!timestampedPoint) {\n    return { x: 0, y: 0 }\n  }\n\n  const time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1000\n  if (time === 0) {\n    return { x: 0, y: 0 }\n  }\n\n  const currentVelocity = {\n    x: (lastPoint.x - timestampedPoint.x) / time,\n    y: (lastPoint.y - timestampedPoint.y) / time,\n  }\n\n  if (currentVelocity.x === Infinity) {\n    currentVelocity.x = 0\n  }\n  if (currentVelocity.y === Infinity) {\n    currentVelocity.y = 0\n  }\n\n  return currentVelocity\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}